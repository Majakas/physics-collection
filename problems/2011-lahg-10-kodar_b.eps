%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Jaan Kalda) (IOC)
%%Title: (kodar_b.xar)
%%CreationDate: (24/11/11) (02:20 AM)
%%BoundingBox: 126 127 385 331
%%AWColourTable
%%+g (_57493616) 0.000
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995-2006 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 1.00 (_57493616) 0 X
2 w
1 j
[ ] 0 d
0 J
384 317.750 m
384 247.058 326.692 189.750 256 189.750 c
185.308 189.750 128 247.058 128 317.750 c
S
0.400 w
[ 4 ] 0 d
320 192 m
320 227.346 291.346 256 256 256 c
220.654 256 192 227.346 192 192 c
192 156.654 220.654 128 256 128 c
291.346 128 320 156.654 320 192 c
S
[ ] 0 d
256 320 m
333.843 186.284 l
S
256 192 m
311.569 224.546 l
S
292.549 213.406 m
286.397 223.910 289.925 237.413 300.429 243.565 c
300.446 243.575 300.463 243.585 300.479 243.594 c
S
0.501 w
2 j
0.00 0.00 0.00 1.00 (_57493616) 0 x
300.916 227.965 m
300.916 228.959 300.110 229.765 299.116 229.765 c
298.122 229.765 297.316 228.959 297.316 227.965 c
297.316 226.971 298.122 226.165 299.116 226.165 c
300.110 226.165 300.916 226.971 300.916 227.965 c
300.916 227.965 l
f
0.400 w
1 j
256 320 m
256 192 l
S
0.501 w
2 j
312.769 224.546 m
312.769 225.208 312.231 225.746 311.569 225.746 c
310.906 225.746 310.369 225.208 310.369 224.546 c
310.369 223.883 310.906 223.346 311.569 223.346 c
312.231 223.346 312.769 223.883 312.769 224.546 c
312.769 224.546 l
f
4 w
1 j
*u
319.483 222.186 m
319.873 222.336 320.247 222.552 320.605 222.834 c
320.963 223.115 321.284 223.447 321.567 223.828 c
321.850 224.209 322.074 224.624 322.239 225.073 c
322.404 225.522 322.488 225.988 322.492 226.471 c
322.488 227.010 322.379 227.479 322.163 227.879 c
321.948 228.280 321.651 228.591 321.270 228.813 c
320.890 229.035 320.451 229.147 319.952 229.151 c
319.518 229.148 319.092 229.063 318.674 228.897 c
318.255 228.731 317.862 228.501 317.493 228.206 c
317.125 227.912 316.800 227.571 316.518 227.184 c
316.236 226.797 316.015 226.381 315.854 225.936 c
315.694 225.491 315.612 225.035 315.609 224.568 c
315.611 224.154 315.677 223.782 315.806 223.455 c
315.935 223.127 316.115 222.848 316.346 222.618 c
316.577 222.388 316.846 222.213 317.155 222.092 c
317.463 221.971 317.797 221.910 318.158 221.909 c
318.283 221.908 318.428 221.919 318.594 221.942 c
318.759 221.965 318.939 222.004 319.135 222.057 c
319.125 221.905 319.117 221.784 319.112 221.695 c
319.106 221.606 319.102 221.538 319.100 221.490 c
319.097 221.443 319.096 221.405 319.095 221.377 c
319.095 221.349 319.095 221.320 319.095 221.289 c
319.093 221.206 319.097 221.105 319.108 220.984 c
319.118 220.863 319.149 220.742 319.198 220.622 c
319.248 220.502 319.330 220.401 319.444 220.320 c
319.558 220.240 319.718 220.197 319.922 220.194 c
320.120 220.197 320.298 220.242 320.457 220.330 c
320.617 220.417 320.758 220.531 320.881 220.671 c
321.004 220.811 321.110 220.961 321.199 221.120 c
321.288 221.279 321.361 221.431 321.419 221.577 c
321.476 221.723 321.518 221.846 321.546 221.946 c
321.573 222.046 321.587 222.106 321.587 222.127 c
321.585 222.161 321.571 222.187 321.547 222.203 c
321.522 222.219 321.499 222.227 321.477 222.226 c
321.438 222.225 321.411 222.215 321.395 222.194 c
321.379 222.173 321.366 222.147 321.358 222.117 c
321.274 221.882 321.164 221.695 321.026 221.554 c
320.889 221.414 320.745 221.312 320.595 221.250 c
320.446 221.189 320.311 221.158 320.191 221.159 c
320.040 221.158 319.918 221.191 319.826 221.257 c
319.734 221.324 319.662 221.433 319.609 221.584 c
319.557 221.734 319.515 221.935 319.483 222.186 c
f
317.600 222.266 m
317.342 222.371 317.130 222.522 316.966 222.718 c
316.801 222.915 316.679 223.144 316.601 223.405 c
316.523 223.667 316.484 223.948 316.485 224.249 c
316.484 224.424 316.501 224.635 316.537 224.884 c
316.572 225.133 316.629 225.403 316.709 225.693 c
316.788 225.983 316.892 226.276 317.022 226.574 c
317.152 226.872 317.312 227.156 317.501 227.428 c
317.745 227.766 318.006 228.045 318.282 228.262 c
318.558 228.480 318.834 228.642 319.110 228.747 c
319.386 228.852 319.647 228.904 319.892 228.903 c
320.227 228.902 320.524 228.818 320.782 228.652 c
321.041 228.486 321.244 228.246 321.391 227.932 c
321.539 227.617 321.614 227.237 321.617 226.790 c
321.617 226.587 321.595 226.342 321.550 226.054 c
321.505 225.766 321.432 225.457 321.331 225.128 c
321.229 224.799 321.094 224.471 320.925 224.144 c
320.757 223.817 320.550 223.514 320.304 223.233 c
320.058 222.952 319.768 222.716 319.434 222.525 c
319.423 222.615 319.404 222.720 319.378 222.841 c
319.352 222.961 319.309 223.079 319.249 223.194 c
319.190 223.310 319.104 223.406 318.994 223.482 c
318.883 223.559 318.737 223.598 318.556 223.601 c
318.378 223.598 318.212 223.549 318.058 223.453 c
317.905 223.357 317.781 223.232 317.687 223.079 c
317.592 222.925 317.543 222.761 317.540 222.585 c
317.543 222.485 317.553 222.408 317.570 222.355 c
317.588 222.301 317.598 222.271 317.600 222.266 c
f
318.217 222.157 m
318.168 222.154 318.108 222.159 318.037 222.172 c
317.966 222.186 317.902 222.223 317.847 222.284 c
317.791 222.344 317.762 222.445 317.759 222.585 c
317.761 222.721 317.799 222.849 317.873 222.969 c
317.946 223.090 318.043 223.188 318.164 223.264 c
318.284 223.341 318.415 223.380 318.556 223.382 c
318.765 223.385 318.919 223.320 319.017 223.187 c
319.116 223.054 319.165 222.837 319.165 222.535 c
319.166 222.464 319.160 222.417 319.147 222.395 c
319.134 222.372 319.103 222.352 319.055 222.336 c
318.924 222.281 318.787 222.237 318.644 222.205 c
318.500 222.173 318.358 222.157 318.217 222.157 c
f
*U
*u
259.710 327.312 m
259.706 327.851 259.596 328.320 259.381 328.720 c
259.165 329.121 258.868 329.432 258.488 329.654 c
258.107 329.876 257.668 329.988 257.169 329.992 c
256.736 329.989 256.310 329.904 255.892 329.738 c
255.473 329.572 255.080 329.342 254.712 329.047 c
254.343 328.753 254.018 328.412 253.736 328.025 c
253.454 327.638 253.233 327.222 253.072 326.777 c
252.912 326.333 252.830 325.876 252.827 325.409 c
252.829 324.995 252.895 324.623 253.024 324.296 c
253.153 323.968 253.333 323.689 253.564 323.459 c
253.795 323.229 254.065 323.054 254.374 322.933 c
254.682 322.812 255.016 322.751 255.377 322.750 c
255.802 322.752 256.223 322.834 256.638 322.996 c
257.054 323.157 257.446 323.382 257.814 323.670 c
258.182 323.958 258.509 324.294 258.793 324.677 c
259.076 325.061 259.300 325.476 259.462 325.923 c
259.624 326.370 259.706 326.833 259.710 327.312 c
f
255.437 323.007 m
255.105 323.009 254.814 323.095 254.562 323.265 c
254.310 323.435 254.113 323.679 253.971 323.995 c
253.829 324.311 253.756 324.690 253.754 325.130 c
253.752 325.243 253.764 325.409 253.787 325.629 c
253.811 325.849 253.855 326.101 253.919 326.387 c
253.983 326.672 254.075 326.971 254.195 327.281 c
254.314 327.592 254.469 327.895 254.660 328.189 c
254.892 328.535 255.147 328.823 255.426 329.053 c
255.704 329.283 255.988 329.456 256.278 329.571 c
256.567 329.686 256.844 329.744 257.110 329.744 c
257.316 329.745 257.520 329.708 257.722 329.634 c
257.923 329.559 258.107 329.441 258.273 329.279 c
258.438 329.118 258.571 328.907 258.670 328.647 c
258.769 328.387 258.820 328.071 258.823 327.701 c
258.824 327.519 258.805 327.293 258.765 327.024 c
258.726 326.755 258.659 326.462 258.565 326.143 c
258.471 325.824 258.343 325.498 258.180 325.166 c
258.017 324.833 257.813 324.513 257.568 324.203 c
257.407 323.997 257.214 323.804 256.989 323.623 c
256.764 323.442 256.519 323.295 256.255 323.182 c
255.990 323.069 255.717 323.011 255.437 323.007 c
f
*U
257.477 184.463 m
257.479 184.480 257.471 184.501 257.456 184.524 c
257.441 184.547 257.412 184.560 257.368 184.563 c
257.346 184.565 257.325 184.558 257.304 184.540 c
257.284 184.523 257.245 184.480 257.189 184.413 c
256.710 183.845 l
256.578 184.080 256.389 184.258 256.144 184.380 c
255.898 184.501 255.612 184.562 255.286 184.563 c
254.967 184.560 254.661 184.494 254.368 184.365 c
254.075 184.236 253.813 184.061 253.581 183.839 c
253.350 183.618 253.167 183.367 253.032 183.088 c
252.897 182.808 252.829 182.516 252.825 182.212 c
252.829 181.943 252.881 181.712 252.981 181.519 c
253.082 181.327 253.210 181.171 253.367 181.051 c
253.524 180.931 253.689 180.847 253.861 180.797 c
254.927 180.518 l
255.021 180.497 255.121 180.468 255.226 180.430 c
255.331 180.392 255.430 180.337 255.524 180.263 c
255.617 180.189 255.693 180.088 255.752 179.959 c
255.812 179.831 255.842 179.665 255.844 179.462 c
255.842 179.236 255.794 179.014 255.701 178.798 c
255.607 178.581 255.478 178.385 255.313 178.210 c
255.149 178.034 254.958 177.894 254.743 177.790 c
254.527 177.685 254.297 177.632 254.051 177.629 c
253.921 177.628 253.779 177.639 253.625 177.662 c
253.470 177.685 253.316 177.726 253.162 177.785 c
253.008 177.845 252.866 177.929 252.737 178.038 c
252.609 178.147 252.506 178.287 252.428 178.458 c
252.350 178.629 252.310 178.838 252.307 179.084 c
252.309 179.207 252.318 179.319 252.334 179.420 c
252.349 179.521 252.360 179.588 252.367 179.622 c
252.373 179.641 252.377 179.655 252.381 179.664 c
252.385 179.673 252.387 179.682 252.387 179.691 c
252.385 179.740 252.372 179.770 252.346 179.784 c
252.321 179.797 252.294 179.803 252.268 179.801 c
252.244 179.801 252.224 179.798 252.210 179.792 c
252.196 179.786 252.182 179.776 252.168 179.761 c
252.161 179.751 252.141 179.689 252.110 179.576 c
252.079 179.463 252.040 179.318 251.995 179.143 c
251.950 178.968 251.903 178.783 251.854 178.587 c
251.805 178.391 251.759 178.206 251.716 178.032 c
251.674 177.857 251.639 177.714 251.612 177.601 c
251.585 177.489 251.571 177.429 251.570 177.420 c
251.571 177.390 251.582 177.366 251.603 177.348 c
251.623 177.330 251.649 177.321 251.680 177.321 c
251.702 177.318 251.723 177.326 251.743 177.343 c
251.764 177.361 251.803 177.403 251.859 177.470 c
252.347 178.038 l
252.492 177.847 252.658 177.700 252.846 177.595 c
253.033 177.491 253.229 177.419 253.433 177.378 c
253.637 177.338 253.836 177.319 254.031 177.321 c
254.372 177.325 254.694 177.400 254.998 177.547 c
255.301 177.694 255.570 177.891 255.804 178.137 c
256.038 178.384 256.222 178.658 256.356 178.960 c
256.490 179.261 256.558 179.568 256.561 179.881 c
256.558 180.109 256.527 180.301 256.468 180.457 c
256.409 180.614 256.342 180.739 256.266 180.835 c
256.190 180.930 256.126 181.001 256.073 181.046 c
256.018 181.102 255.961 181.150 255.903 181.188 c
255.845 181.227 255.773 181.263 255.687 181.295 c
255.601 181.328 255.487 181.363 255.347 181.402 c
255.207 181.441 255.027 181.488 254.808 181.544 c
254.732 181.565 254.649 181.588 254.557 181.613 c
254.466 181.638 254.382 181.661 254.305 181.681 c
254.228 181.702 254.173 181.716 254.140 181.724 c
254.048 181.753 253.956 181.806 253.863 181.881 c
253.771 181.956 253.693 182.056 253.631 182.180 c
253.568 182.304 253.535 182.454 253.533 182.630 c
253.535 182.834 253.581 183.034 253.672 183.229 c
253.763 183.424 253.889 183.601 254.049 183.760 c
254.210 183.918 254.395 184.045 254.604 184.139 c
254.814 184.233 255.038 184.281 255.276 184.284 c
255.554 184.285 255.800 184.234 256.015 184.131 c
256.230 184.028 256.399 183.863 256.522 183.636 c
256.645 183.409 256.708 183.110 256.710 182.740 c
256.709 182.581 256.702 182.455 256.690 182.364 c
256.679 182.272 256.672 182.211 256.671 182.182 c
256.668 182.173 256.673 182.155 256.685 182.128 c
256.698 182.101 256.733 182.086 256.790 182.082 c
256.838 182.080 256.870 182.092 256.887 182.118 c
256.905 182.145 256.922 182.199 256.939 182.281 c
257.477 184.463 l
f
353.755 224.847 m
353.755 226.381 l
353.756 226.630 353.781 226.866 353.833 227.090 c
353.884 227.313 353.960 227.513 354.060 227.687 c
354.160 227.862 354.283 227.999 354.429 228.100 c
354.575 228.200 354.743 228.251 354.933 228.254 c
354.967 228.254 354.991 228.253 355.006 228.252 c
355.022 228.251 355.034 228.248 355.043 228.244 c
355.030 228.240 355.006 228.225 354.970 228.196 c
354.934 228.168 354.899 228.125 354.866 228.069 c
354.833 228.013 354.816 227.941 354.814 227.855 c
354.815 227.762 354.836 227.684 354.876 227.620 c
354.916 227.557 354.969 227.509 355.033 227.476 c
355.098 227.443 355.167 227.427 355.241 227.427 c
355.303 227.426 355.367 227.441 355.432 227.470 c
355.497 227.499 355.553 227.545 355.598 227.610 c
355.644 227.674 355.667 227.760 355.669 227.865 c
355.668 227.973 355.636 228.073 355.574 228.164 c
355.511 228.256 355.424 228.330 355.314 228.386 c
355.204 228.442 355.077 228.471 354.933 228.472 c
354.751 228.470 354.592 228.433 354.454 228.361 c
354.316 228.290 354.197 228.198 354.099 228.085 c
354 227.973 353.918 227.854 353.854 227.729 c
353.790 227.604 353.740 227.487 353.706 227.377 c
353.706 228.472 l
352.322 228.363 l
352.322 228.054 l
352.551 228.056 352.722 228.044 352.833 228.018 c
352.945 227.992 353.018 227.938 353.053 227.858 c
353.087 227.777 353.102 227.657 353.099 227.496 c
353.099 224.827 l
353.102 224.681 353.084 224.576 353.046 224.512 c
353.008 224.448 352.933 224.410 352.820 224.396 c
352.708 224.382 352.542 224.377 352.322 224.379 c
352.322 224.071 l
352.453 224.074 352.588 224.078 352.727 224.083 c
352.866 224.088 352.999 224.092 353.125 224.095 c
353.252 224.098 353.363 224.100 353.457 224.101 c
353.659 224.101 353.870 224.100 354.090 224.097 c
354.310 224.094 354.521 224.085 354.724 224.071 c
354.724 224.379 l
354.514 224.379 l
354.331 224.379 354.188 224.386 354.084 224.402 c
353.980 224.417 353.905 224.443 353.858 224.479 c
353.811 224.515 353.782 224.563 353.770 224.623 c
353.759 224.683 353.754 224.758 353.755 224.847 c
f
*u
359.266 224.827 m
359.280 224.691 359.318 224.562 359.381 224.438 c
359.445 224.314 359.532 224.212 359.643 224.133 c
359.754 224.054 359.887 224.013 360.043 224.010 c
360.099 224.009 360.170 224.020 360.259 224.044 c
360.348 224.069 360.438 224.114 360.530 224.180 c
360.621 224.247 360.699 224.343 360.761 224.468 c
360.824 224.593 360.857 224.756 360.859 224.956 c
360.859 225.514 l
360.612 225.514 l
360.612 224.956 l
360.609 224.766 360.586 224.626 360.543 224.534 c
360.500 224.442 360.450 224.383 360.395 224.355 c
360.339 224.328 360.292 224.316 360.253 224.318 c
360.171 224.321 360.106 224.344 360.056 224.389 c
360.007 224.434 359.970 224.488 359.945 224.549 c
359.920 224.610 359.904 224.667 359.895 224.718 c
359.887 224.769 359.883 224.802 359.884 224.817 c
359.884 226.809 l
359.886 226.948 359.882 227.084 359.871 227.218 c
359.860 227.351 359.829 227.481 359.778 227.609 c
359.727 227.736 359.643 227.861 359.525 227.984 c
359.328 228.176 359.112 228.316 358.877 228.403 c
358.641 228.489 358.403 228.532 358.161 228.531 c
357.886 228.529 357.635 228.480 357.408 228.385 c
357.182 228.290 357.001 228.158 356.866 227.990 c
356.730 227.822 356.661 227.627 356.657 227.406 c
356.660 227.256 356.704 227.141 356.789 227.060 c
356.875 226.980 356.983 226.939 357.116 226.938 c
357.257 226.941 357.368 226.985 357.449 227.070 c
357.531 227.155 357.572 227.264 357.574 227.396 c
357.576 227.439 357.566 227.496 357.544 227.566 c
357.522 227.636 357.474 227.700 357.401 227.758 c
357.328 227.816 357.216 227.848 357.066 227.855 c
357.158 227.970 357.267 228.061 357.393 228.128 c
357.520 228.195 357.649 228.242 357.781 228.271 c
357.913 228.299 358.033 228.313 358.141 228.312 c
358.308 228.313 358.471 228.268 358.632 228.179 c
358.792 228.089 358.925 227.950 359.031 227.762 c
359.137 227.574 359.192 227.333 359.196 227.038 c
359.196 226.670 l
359.025 226.662 358.838 226.649 358.635 226.630 c
358.431 226.612 358.221 226.579 358.004 226.531 c
357.788 226.483 357.574 226.410 357.363 226.312 c
357.116 226.197 356.919 226.068 356.773 225.923 c
356.627 225.778 356.523 225.628 356.460 225.472 c
356.397 225.316 356.366 225.164 356.368 225.017 c
356.371 224.816 356.425 224.647 356.529 224.511 c
356.632 224.375 356.766 224.267 356.929 224.186 c
357.092 224.106 357.265 224.048 357.447 224.013 c
357.629 223.978 357.801 223.961 357.961 223.961 c
358.181 223.963 358.377 224.003 358.550 224.082 c
358.722 224.160 358.869 224.264 358.990 224.395 c
359.111 224.525 359.203 224.669 359.266 224.827 c
359.266 224.827 l
f
359.196 226.461 m
359.196 225.465 l
359.194 225.229 359.154 225.029 359.077 224.865 c
359.001 224.701 358.902 224.568 358.782 224.467 c
358.661 224.367 358.535 224.293 358.402 224.247 c
358.269 224.202 358.145 224.179 358.031 224.180 c
357.866 224.181 357.716 224.217 357.581 224.289 c
357.446 224.360 357.338 224.459 357.258 224.586 c
357.177 224.712 357.136 224.859 357.134 225.027 c
357.132 225.166 357.162 225.315 357.225 225.474 c
357.288 225.632 357.396 225.783 357.549 225.927 c
357.702 226.071 357.912 226.192 358.181 226.289 c
358.449 226.386 358.788 226.444 359.196 226.461 c
f
*U
362.654 228.054 m
364.079 228.054 l
364.079 228.363 l
362.654 228.363 l
362.654 230.196 l
362.405 230.196 l
362.404 229.989 362.381 229.776 362.338 229.557 c
362.294 229.338 362.223 229.133 362.125 228.943 c
362.027 228.753 361.896 228.597 361.731 228.476 c
361.567 228.354 361.363 228.286 361.120 228.273 c
361.120 228.054 l
361.967 228.054 l
361.967 225.305 l
361.971 225.001 362.021 224.759 362.117 224.578 c
362.214 224.397 362.333 224.263 362.475 224.174 c
362.617 224.085 362.759 224.027 362.900 223.999 c
363.041 223.971 363.159 223.959 363.252 223.961 c
363.429 223.963 363.580 224.003 363.705 224.081 c
363.830 224.160 363.932 224.264 364.010 224.394 c
364.089 224.524 364.147 224.668 364.183 224.826 c
364.220 224.984 364.238 225.143 364.238 225.305 c
364.238 225.872 l
363.990 225.872 l
363.990 225.325 l
363.989 225.079 363.958 224.873 363.899 224.708 c
363.839 224.542 363.760 224.418 363.659 224.334 c
363.559 224.251 363.447 224.209 363.322 224.209 c
363.190 224.211 363.081 224.243 362.996 224.305 c
362.912 224.366 362.846 224.444 362.799 224.539 c
362.751 224.634 362.718 224.732 362.697 224.833 c
362.677 224.934 362.664 225.026 362.660 225.108 c
362.655 225.190 362.653 225.249 362.654 225.285 c
362.654 228.054 l
f
*u
368.124 224.827 m
368.138 224.691 368.176 224.562 368.239 224.438 c
368.303 224.314 368.390 224.212 368.501 224.133 c
368.612 224.054 368.745 224.013 368.901 224.010 c
368.957 224.009 369.028 224.020 369.117 224.044 c
369.206 224.069 369.296 224.114 369.388 224.180 c
369.479 224.247 369.557 224.343 369.619 224.468 c
369.682 224.593 369.715 224.756 369.717 224.956 c
369.717 225.514 l
369.470 225.514 l
369.470 224.956 l
369.467 224.766 369.444 224.626 369.401 224.534 c
369.358 224.442 369.308 224.383 369.253 224.355 c
369.197 224.328 369.150 224.316 369.111 224.318 c
369.029 224.321 368.964 224.344 368.914 224.389 c
368.865 224.434 368.828 224.488 368.803 224.549 c
368.778 224.610 368.762 224.667 368.753 224.718 c
368.745 224.769 368.741 224.802 368.742 224.817 c
368.742 226.809 l
368.744 226.948 368.740 227.084 368.729 227.218 c
368.718 227.351 368.687 227.481 368.636 227.609 c
368.585 227.736 368.501 227.861 368.383 227.984 c
368.186 228.176 367.970 228.316 367.735 228.403 c
367.499 228.489 367.261 228.532 367.019 228.531 c
366.744 228.529 366.493 228.480 366.266 228.385 c
366.040 228.290 365.859 228.158 365.724 227.990 c
365.588 227.822 365.519 227.627 365.515 227.406 c
365.518 227.256 365.562 227.141 365.647 227.060 c
365.733 226.980 365.841 226.939 365.974 226.938 c
366.115 226.941 366.226 226.985 366.307 227.070 c
366.389 227.155 366.430 227.264 366.432 227.396 c
366.434 227.439 366.424 227.496 366.402 227.566 c
366.380 227.636 366.332 227.700 366.259 227.758 c
366.186 227.816 366.074 227.848 365.924 227.855 c
366.016 227.970 366.125 228.061 366.251 228.128 c
366.378 228.195 366.507 228.242 366.639 228.271 c
366.771 228.299 366.891 228.313 366.999 228.312 c
367.166 228.313 367.329 228.268 367.490 228.179 c
367.650 228.089 367.783 227.950 367.889 227.762 c
367.995 227.574 368.050 227.333 368.054 227.038 c
368.054 226.670 l
367.883 226.662 367.696 226.649 367.493 226.630 c
367.289 226.612 367.079 226.579 366.862 226.531 c
366.646 226.483 366.432 226.410 366.221 226.312 c
365.974 226.197 365.777 226.068 365.631 225.923 c
365.485 225.778 365.381 225.628 365.318 225.472 c
365.255 225.316 365.224 225.164 365.226 225.017 c
365.229 224.816 365.283 224.647 365.387 224.511 c
365.490 224.375 365.624 224.267 365.787 224.186 c
365.950 224.106 366.123 224.048 366.305 224.013 c
366.487 223.978 366.659 223.961 366.819 223.961 c
367.039 223.963 367.235 224.003 367.408 224.082 c
367.580 224.160 367.727 224.264 367.848 224.395 c
367.969 224.525 368.061 224.669 368.124 224.827 c
368.124 224.827 l
f
368.054 226.461 m
368.054 225.465 l
368.052 225.229 368.012 225.029 367.935 224.865 c
367.859 224.701 367.760 224.568 367.640 224.467 c
367.519 224.367 367.393 224.293 367.260 224.247 c
367.127 224.202 367.003 224.179 366.889 224.180 c
366.724 224.181 366.574 224.217 366.439 224.289 c
366.304 224.360 366.196 224.459 366.116 224.586 c
366.035 224.712 365.994 224.859 365.992 225.027 c
365.990 225.166 366.020 225.315 366.083 225.474 c
366.146 225.632 366.254 225.783 366.407 225.927 c
366.560 226.071 366.770 226.192 367.039 226.289 c
367.307 226.386 367.646 226.444 368.054 226.461 c
f
*U
371.860 226.002 m
371.919 225.993 372.004 225.973 372.115 225.943 c
372.226 225.912 372.341 225.864 372.461 225.798 c
372.580 225.732 372.682 225.641 372.766 225.526 c
372.850 225.410 372.893 225.264 372.897 225.086 c
372.897 224.915 372.858 224.761 372.778 224.625 c
372.698 224.489 372.575 224.381 372.408 224.302 c
372.242 224.222 372.029 224.181 371.771 224.180 c
371.494 224.181 371.264 224.241 371.081 224.358 c
370.899 224.475 370.753 224.640 370.642 224.851 c
370.532 225.062 370.446 225.310 370.385 225.593 c
370.372 225.657 370.358 225.702 370.342 225.727 c
370.325 225.752 370.293 225.764 370.246 225.763 c
370.184 225.764 370.147 225.744 370.133 225.706 c
370.120 225.667 370.114 225.603 370.117 225.514 c
370.117 224.200 l
370.115 224.116 370.119 224.055 370.131 224.017 c
370.142 223.979 370.174 223.961 370.226 223.961 c
370.241 223.960 370.256 223.963 370.271 223.971 c
370.285 223.978 370.307 223.996 370.337 224.025 c
370.367 224.053 370.413 224.098 370.475 224.160 c
370.480 224.165 370.487 224.174 370.495 224.186 c
370.504 224.198 370.521 224.219 370.547 224.250 c
370.573 224.281 370.616 224.327 370.674 224.389 c
370.822 224.252 370.966 224.153 371.107 224.092 c
371.248 224.031 371.376 223.994 371.491 223.979 c
371.606 223.965 371.699 223.959 371.771 223.961 c
372.151 223.965 372.460 224.031 372.696 224.161 c
372.932 224.290 373.105 224.459 373.214 224.667 c
373.323 224.876 373.377 225.102 373.375 225.345 c
373.372 225.520 373.345 225.671 373.293 225.798 c
373.242 225.924 373.183 226.028 373.118 226.109 c
373.053 226.190 372.999 226.251 372.957 226.290 c
372.847 226.395 372.731 226.478 372.609 226.538 c
372.487 226.599 372.360 226.646 372.228 226.680 c
372.096 226.714 371.960 226.743 371.820 226.768 c
371.679 226.795 371.537 226.825 371.394 226.861 c
371.251 226.896 371.119 226.943 370.999 227.001 c
370.879 227.059 370.782 227.135 370.709 227.229 c
370.635 227.323 370.597 227.441 370.596 227.585 c
370.593 227.704 370.626 227.821 370.694 227.936 c
370.762 228.051 370.878 228.146 371.041 228.223 c
371.204 228.299 371.428 228.338 371.711 228.341 c
371.983 228.337 372.196 228.289 372.353 228.196 c
372.509 228.104 372.624 227.990 372.697 227.855 c
372.771 227.720 372.818 227.586 372.840 227.455 c
372.862 227.324 372.874 227.218 372.877 227.137 c
372.885 227.094 372.903 227.067 372.933 227.058 c
372.962 227.049 372.983 227.045 372.996 227.047 c
373.058 227.045 373.095 227.061 373.109 227.096 c
373.122 227.130 373.128 227.193 373.125 227.286 c
373.125 228.291 l
373.127 228.376 373.123 228.437 373.111 228.475 c
373.100 228.513 373.068 228.531 373.016 228.531 c
372.994 228.533 372.971 228.528 372.946 228.516 c
372.922 228.503 372.879 228.468 372.817 228.411 c
372.799 228.389 372.772 228.361 372.736 228.328 c
372.700 228.294 372.670 228.269 372.648 228.252 c
372.520 228.343 372.394 228.408 372.270 228.448 c
372.146 228.488 372.035 228.512 371.936 228.520 c
371.838 228.529 371.763 228.532 371.711 228.531 c
371.409 228.529 371.155 228.491 370.949 228.418 c
370.744 228.344 370.581 228.247 370.458 228.127 c
370.336 228.007 370.249 227.875 370.195 227.732 c
370.142 227.589 370.116 227.447 370.117 227.306 c
370.118 227.132 370.156 226.975 370.231 226.834 c
370.305 226.694 370.410 226.569 370.546 226.460 c
370.649 226.375 370.757 226.308 370.869 226.257 c
370.981 226.206 371.115 226.162 371.272 226.125 c
371.428 226.088 371.625 226.046 371.861 226.002 c
371.860 226.002 l
f
0.00 0.00 0.00 XA
2 w
2 j
255.496 319.519 m
291.076 319.519 319.954 290.641 319.954 255.061 c
319.954 219.480 291.076 190.602 255.496 190.602 c
219.915 190.602 191.037 219.480 191.037 255.061 c
191.037 290.641 219.915 319.519 255.496 319.519 c
s
0.00 0.00 0.00 Xa
137.211 189.759 m
369.730 189.009 l
S
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
