%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Unbranded User) (Unbranded Company)
%%Title: (optika_lah.xar)
%%CreationDate: (17/03/07) (02:45 PM)
%%BoundingBox: 60 38 427 199
%%AWColourTable
%%+h (Red) 0.0 100.0 100.0
%%+h (Orange-Red) 15.0 100.0 100.0
%%+h (Orange) 30.0 100.0 100.0
%%+h (Orange-Yellow) 45.0 100.0 100.0
%%+h (Yellow) 60.0 100.0 100.0
%%+h (Yellow-Chartreuse) 75.0 100.0 100.0
%%+h (Chartreuse) 90.0 100.0 100.0
%%+h (Chartreuse-Green) 105.0 100.0 100.0
%%+h (Green) 120.0 100.0 100.0
%%+h (Green-SpringGreen) 135.0 100.0 100.0
%%+h (Spring Green) 150.0 100.0 100.0
%%+h (SpringGreen-Cyan) 165.0 100.0 100.0
%%+h (Cyan) 180.0 100.0 100.0
%%+h (Sky Blue) 195.0 100.0 100.0
%%+h (Mid Blue) 210.0 100.0 100.0
%%+h (MidBlue-Blue) 225.0 100.0 100.0
%%+h (Blue) 240.0 100.0 100.0
%%+h (Blue-Indigo) 255.0 100.0 100.0
%%+h (Indigo) 270.0 100.0 100.0
%%+h (Violet) 285.0 100.0 100.0
%%+h (Magenta) 300.0 100.0 100.0
%%+h (Magenta-Crimson) 315.0 100.0 100.0
%%+h (Crimson) 330.0 100.0 100.0
%%+h (Crimson-Red) 345.0 100.0 100.0
%%+h (Black) 0.0 0.0 0.0
%%+t (90% Black) 90
%%+t (80% Black) 80
%%+t (70% Black) 70
%%+t (60% Black) 60
%%+t (50% Black) 50
%%+t (40% Black) 40
%%+t (30% Black) 30
%%+t (20% Black) 20
%%+t (10% Black) 10
%%+h (White) 0.0 0.0 100.0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995,1996 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (Black) 0 1 XX
0.500 w
2 j
[ ] 0 d
0 J
0.00 0.00 0.00 (Black) 0 1 Xx
61.097 123.450 m
398.174 123.450 l
S
227.175 199.200 m
226.800 49.200 l
S
231.301 49.938 m
222.302 49.961 l
226.775 39.450 l
f
133.800 123.523 m
133.800 144.159 l
S
131.800 143.825 m
135.799 143.825 l
133.800 148.491 l
f
0.628 w
74.367 122.918 m
226.604 188.477 l
S
174.507 100.783 m
326.744 166.342 l
S
0.500 w
227.501 188.764 m
392.968 69.009 l
S
134.175 148.575 m
226.800 148.200 l
S
227.175 148.200 m
427.425 61.950 l
S
283.950 172.275 m
283.950 90.150 l
S
364.888 123.552 m
365.038 95.676 l
S
368.284 96.234 m
361.785 96.200 l
365.075 88.634 l
f
100.826 123.362 m
100.810 130.288 l
S
98.811 129.949 m
102.810 129.959 l
100.799 134.620 l
f
100.620 134.130 m
227.220 134.580 l
S
226.770 134.580 m
226.920 134.580 364.470 108.130 383.520 104.430 c
S
329.289 123.264 m
329.250 119.033 l
S
331.252 119.348 m
327.253 119.384 l
329.210 114.700 l
f
227.231 39.810 m
226.823 189.810 l
S
222.325 189.047 m
231.324 189.072 l
226.796 199.559 l
f
0.250 w
*u
74.867 132.843 m
74.867 134.789 73.586 136.094 71.785 136.094 c
69.175 136.094 66.517 133.351 66.517 130.535 c
66.517 128.529 67.870 127.309 69.610 127.309 c
72.172 127.309 74.867 129.955 74.867 132.843 c
f
69.683 127.623 m
68.486 127.623 67.640 128.602 67.640 130.197 c
67.640 130.728 67.810 132.493 68.740 133.907 c
69.574 135.163 70.758 135.792 71.713 135.792 c
72.704 135.792 73.791 135.115 73.791 133.314 c
73.791 132.444 73.465 130.559 72.269 129.073 c
71.689 128.336 70.698 127.623 69.683 127.623 c
f
*U
*u
131.463 155.214 m
130.979 154.404 130.508 154.235 129.976 154.199 c
129.831 154.187 129.722 154.187 129.722 153.957 c
129.722 153.885 129.783 153.825 129.879 153.825 c
130.206 153.825 130.580 153.861 130.919 153.861 c
131.318 153.861 131.741 153.825 132.127 153.825 c
132.200 153.825 132.357 153.825 132.357 154.054 c
132.357 154.187 132.248 154.199 132.163 154.199 c
131.886 154.223 131.596 154.320 131.596 154.622 c
131.596 154.767 131.668 154.900 131.765 155.069 c
131.849 155.214 131.861 155.214 132.683 156.616 c
135.716 156.616 l
135.740 156.362 135.910 154.719 135.910 154.598 c
135.910 154.235 135.281 154.199 135.039 154.199 c
134.870 154.199 134.750 154.199 134.750 153.957 c
134.750 153.825 134.894 153.825 134.919 153.825 c
135.414 153.825 135.934 153.861 136.429 153.861 c
136.731 153.861 137.493 153.825 137.795 153.825 c
137.867 153.825 138.012 153.825 138.012 154.066 c
138.012 154.199 137.891 154.199 137.734 154.199 c
136.985 154.199 136.985 154.284 136.949 154.634 c
136.212 162.187 l
136.188 162.428 136.188 162.477 135.982 162.477 c
135.789 162.477 135.740 162.392 135.668 162.271 c
131.463 155.214 l
f
132.913 156.991 m
135.293 160.978 l
135.680 156.991 l
132.913 156.991 l
f
*U
*u
99.588 139.839 m
99.104 139.029 98.633 138.860 98.101 138.824 c
97.956 138.812 97.847 138.812 97.847 138.582 c
97.847 138.510 97.908 138.450 98.004 138.450 c
98.331 138.450 98.705 138.486 99.044 138.486 c
99.443 138.486 99.866 138.450 100.252 138.450 c
100.325 138.450 100.482 138.450 100.482 138.679 c
100.482 138.812 100.373 138.824 100.288 138.824 c
100.011 138.848 99.721 138.945 99.721 139.247 c
99.721 139.392 99.793 139.525 99.890 139.694 c
99.974 139.839 99.986 139.839 100.808 141.241 c
103.841 141.241 l
103.865 140.987 104.035 139.344 104.035 139.223 c
104.035 138.860 103.406 138.824 103.164 138.824 c
102.995 138.824 102.875 138.824 102.875 138.582 c
102.875 138.450 103.019 138.450 103.044 138.450 c
103.539 138.450 104.059 138.486 104.554 138.486 c
104.856 138.486 105.618 138.450 105.920 138.450 c
105.992 138.450 106.137 138.450 106.137 138.691 c
106.137 138.824 106.016 138.824 105.859 138.824 c
105.110 138.824 105.110 138.909 105.074 139.259 c
104.337 146.812 l
104.313 147.053 104.313 147.102 104.107 147.102 c
103.914 147.102 103.865 147.017 103.793 146.896 c
99.588 139.839 l
f
101.038 141.616 m
103.418 145.603 l
103.805 141.616 l
101.038 141.616 l
f
*U
0.00 0.00 0.00 1.00 k
108.946 146.828 m
109.002 146.949 109.027 146.997 109.027 147.094 c
109.027 147.367 108.777 147.553 108.543 147.553 c
108.277 147.553 108.148 147.367 108.092 147.198 c
106.956 143.694 l
106.916 143.589 106.916 143.573 106.916 143.565 c
106.916 143.452 107.174 143.364 107.246 143.364 c
107.319 143.364 107.359 143.436 107.383 143.493 c
108.946 146.828 l
f
0.00 0.00 0.00 (Black) 0 1 Xx
340.324 119.832 m
340.312 119.868 340.264 119.965 340.264 120.001 c
340.264 120.013 340.481 120.182 340.614 120.279 c
342.729 121.910 l
343.865 122.744 344.336 122.792 344.699 122.828 c
344.796 122.841 344.916 122.853 344.916 123.070 c
344.916 123.119 344.880 123.203 344.784 123.203 c
344.518 123.203 344.216 123.167 343.925 123.167 c
343.490 123.167 343.019 123.203 342.584 123.203 c
342.499 123.203 342.355 123.203 342.355 122.961 c
342.355 122.877 342.415 122.841 342.499 122.828 c
342.765 122.804 342.874 122.744 342.874 122.575 c
342.874 122.357 342.512 122.079 342.439 122.019 c
337.726 118.393 l
338.693 122.273 l
338.802 122.708 338.826 122.828 339.708 122.828 c
340.010 122.828 340.119 122.828 340.119 123.070 c
340.119 123.179 340.022 123.203 339.950 123.203 c
339.611 123.203 338.741 123.167 338.403 123.167 c
338.053 123.167 337.194 123.203 336.844 123.203 c
336.760 123.203 336.602 123.203 336.602 122.973 c
336.602 122.828 336.711 122.828 336.953 122.828 c
337.110 122.828 337.327 122.816 337.472 122.804 c
337.666 122.780 337.738 122.744 337.738 122.611 c
337.738 122.563 337.726 122.526 337.690 122.381 c
336.071 115.892 l
335.950 115.421 335.926 115.324 334.971 115.324 c
334.766 115.324 334.633 115.324 334.633 115.094 c
334.633 114.950 334.778 114.950 334.814 114.950 c
335.152 114.950 336.010 114.986 336.349 114.986 c
336.602 114.986 336.868 114.974 337.122 114.974 c
337.388 114.974 337.654 114.950 337.908 114.950 c
337.992 114.950 338.149 114.950 338.149 115.191 c
338.149 115.324 338.040 115.324 337.811 115.324 c
337.364 115.324 337.025 115.324 337.025 115.542 c
337.025 115.626 337.098 115.892 337.134 116.073 c
337.303 116.702 337.460 117.342 337.617 117.970 c
339.418 119.372 l
339.732 118.647 340.518 116.847 340.820 116.122 c
340.965 115.795 340.965 115.771 340.965 115.699 c
340.965 115.336 340.445 115.324 340.336 115.324 c
340.203 115.324 340.071 115.324 340.071 115.082 c
340.071 114.950 340.216 114.950 340.240 114.950 c
340.723 114.950 341.231 114.986 341.714 114.986 c
341.980 114.986 342.632 114.950 342.898 114.950 c
342.959 114.950 343.116 114.950 343.116 115.191 c
343.116 115.324 342.983 115.324 342.874 115.324 c
342.379 115.336 342.222 115.445 342.040 115.868 c
340.324 119.832 l
f
347.256 117.865 m
347.256 118.107 347.223 118.107 346.982 118.107 c
346.450 117.591 345.628 117.591 345.338 117.591 c
345.338 117.277 l
345.548 117.277 346.079 117.277 346.563 117.502 c
346.563 113.434 l
346.563 113.168 346.563 113.064 345.733 113.064 c
345.387 113.064 l
345.387 112.750 l
345.830 112.782 346.458 112.782 346.909 112.782 c
347.360 112.782 347.989 112.782 348.432 112.750 c
348.432 113.064 l
348.085 113.064 l
347.256 113.064 347.256 113.168 347.256 113.434 c
347.256 117.865 l
f
379.326 90.956 m
379.314 90.992 379.266 91.089 379.266 91.125 c
379.266 91.137 379.483 91.306 379.616 91.403 c
381.731 93.034 l
382.867 93.868 383.338 93.916 383.701 93.952 c
383.798 93.965 383.918 93.977 383.918 94.194 c
383.918 94.243 383.882 94.327 383.786 94.327 c
383.520 94.327 383.218 94.291 382.927 94.291 c
382.492 94.291 382.021 94.327 381.586 94.327 c
381.501 94.327 381.357 94.327 381.357 94.085 c
381.357 94.001 381.417 93.965 381.501 93.952 c
381.767 93.928 381.876 93.868 381.876 93.699 c
381.876 93.481 381.514 93.203 381.441 93.143 c
376.728 89.517 l
377.695 93.397 l
377.804 93.832 377.828 93.952 378.710 93.952 c
379.012 93.952 379.121 93.952 379.121 94.194 c
379.121 94.303 379.024 94.327 378.952 94.327 c
378.613 94.327 377.743 94.291 377.405 94.291 c
377.055 94.291 376.196 94.327 375.846 94.327 c
375.762 94.327 375.604 94.327 375.604 94.097 c
375.604 93.952 375.713 93.952 375.955 93.952 c
376.112 93.952 376.329 93.940 376.474 93.928 c
376.668 93.904 376.740 93.868 376.740 93.735 c
376.740 93.687 376.728 93.650 376.692 93.505 c
375.073 87.016 l
374.952 86.545 374.928 86.448 373.973 86.448 c
373.768 86.448 373.635 86.448 373.635 86.218 c
373.635 86.074 373.780 86.074 373.816 86.074 c
374.154 86.074 375.012 86.110 375.351 86.110 c
375.604 86.110 375.870 86.098 376.124 86.098 c
376.390 86.098 376.656 86.074 376.910 86.074 c
376.994 86.074 377.151 86.074 377.151 86.315 c
377.151 86.448 377.042 86.448 376.813 86.448 c
376.366 86.448 376.027 86.448 376.027 86.666 c
376.027 86.750 376.100 87.016 376.136 87.197 c
376.305 87.826 376.462 88.466 376.619 89.094 c
378.420 90.496 l
378.734 89.771 379.520 87.971 379.822 87.246 c
379.967 86.919 379.967 86.895 379.967 86.823 c
379.967 86.460 379.447 86.448 379.338 86.448 c
379.205 86.448 379.073 86.448 379.073 86.206 c
379.073 86.074 379.218 86.074 379.242 86.074 c
379.725 86.074 380.233 86.110 380.716 86.110 c
380.982 86.110 381.634 86.074 381.900 86.074 c
381.961 86.074 382.118 86.074 382.118 86.315 c
382.118 86.448 381.985 86.448 381.876 86.448 c
381.381 86.460 381.224 86.569 381.042 86.992 c
379.326 90.956 l
f
387.699 85.380 m
387.401 85.380 l
387.385 85.267 387.305 84.736 387.184 84.647 c
387.128 84.599 386.475 84.599 386.362 84.599 c
384.856 84.599 l
385.089 84.784 385.653 85.251 385.887 85.436 c
386.161 85.654 386.878 86.169 387.128 86.411 c
387.369 86.653 387.699 87.064 387.699 87.636 c
387.699 88.643 386.789 89.231 385.710 89.231 c
384.671 89.231 383.946 88.546 383.946 87.789 c
383.946 87.378 384.292 87.329 384.381 87.329 c
384.582 87.329 384.816 87.474 384.816 87.764 c
384.816 87.942 384.711 88.199 384.356 88.199 c
384.542 88.610 385.033 88.916 385.589 88.916 c
386.435 88.916 386.886 88.288 386.886 87.636 c
386.886 87.064 386.507 86.476 385.943 85.960 c
384.034 84.212 l
383.954 84.131 383.946 84.123 383.946 83.874 c
387.450 83.874 l
387.699 85.380 l
f
258.024 176.093 m
257.686 176.081 257.444 175.815 257.444 175.549 c
257.444 175.380 257.553 175.199 257.819 175.199 c
258.085 175.199 258.375 175.404 258.375 175.875 c
258.375 176.419 257.855 176.915 256.937 176.915 c
255.342 176.915 254.895 175.682 254.895 175.150 c
254.895 174.208 255.789 174.027 256.139 173.954 c
256.768 173.833 257.396 173.700 257.396 173.036 c
257.396 172.721 257.118 171.706 255.668 171.706 c
255.499 171.706 254.568 171.706 254.290 172.347 c
254.750 172.286 255.052 172.649 255.052 172.987 c
255.052 173.265 254.858 173.410 254.605 173.410 c
254.290 173.410 253.928 173.157 253.928 172.613 c
253.928 171.924 254.617 171.441 255.656 171.441 c
257.614 171.441 258.085 172.903 258.085 173.447 c
258.085 173.882 257.855 174.184 257.710 174.329 c
257.384 174.667 257.034 174.727 256.502 174.836 c
256.067 174.933 255.583 175.017 255.583 175.561 c
255.583 175.912 255.874 176.649 256.937 176.649 c
257.239 176.649 257.843 176.564 258.024 176.093 c
f
180.398 176.467 m
180.060 176.455 179.818 176.189 179.818 175.923 c
179.818 175.754 179.927 175.573 180.193 175.573 c
180.459 175.573 180.749 175.778 180.749 176.249 c
180.749 176.793 180.229 177.289 179.311 177.289 c
177.716 177.289 177.269 176.056 177.269 175.524 c
177.269 174.582 178.163 174.401 178.513 174.328 c
179.142 174.207 179.770 174.074 179.770 173.410 c
179.770 173.095 179.492 172.080 178.042 172.080 c
177.873 172.080 176.942 172.080 176.664 172.721 c
177.124 172.660 177.426 173.023 177.426 173.361 c
177.426 173.639 177.232 173.784 176.979 173.784 c
176.664 173.784 176.302 173.531 176.302 172.987 c
176.302 172.298 176.991 171.815 178.030 171.815 c
179.988 171.815 180.459 173.277 180.459 173.821 c
180.459 174.256 180.229 174.558 180.084 174.703 c
179.758 175.041 179.408 175.101 178.876 175.210 c
178.441 175.307 177.957 175.391 177.957 175.935 c
177.957 176.286 178.248 177.023 179.311 177.023 c
179.613 177.023 180.217 176.938 180.398 176.467 c
f
0.00 0.00 0.00 1.00 k
183.826 180.326 m
183.882 180.447 183.907 180.495 183.907 180.592 c
183.907 180.865 183.657 181.051 183.423 181.051 c
183.157 181.051 183.028 180.865 182.972 180.696 c
181.836 177.192 l
181.796 177.087 181.796 177.071 181.796 177.063 c
181.796 176.950 182.054 176.862 182.126 176.862 c
182.199 176.862 182.239 176.934 182.263 176.991 c
183.826 180.326 l
f
0.00 0.00 0.00 (Black) 0 1 Xx
276.085 112.877 m
277.257 112.877 l
278.163 112.877 278.260 112.684 278.260 112.333 c
278.260 112.248 278.260 112.103 278.176 111.741 c
278.151 111.680 278.139 111.632 278.139 111.608 c
278.139 111.511 278.212 111.463 278.284 111.463 c
278.405 111.463 278.405 111.499 278.466 111.717 c
279.130 114.339 l
279.166 114.472 279.166 114.496 279.166 114.532 c
279.166 114.557 279.142 114.665 279.021 114.665 c
278.901 114.665 278.889 114.605 278.840 114.411 c
278.586 113.469 278.308 113.251 277.281 113.251 c
276.182 113.251 l
276.955 116.321 l
277.064 116.744 277.076 116.792 277.608 116.792 c
279.203 116.792 l
280.689 116.792 280.967 116.393 280.967 115.463 c
280.967 115.185 280.967 115.137 280.931 114.810 c
280.907 114.653 280.907 114.629 280.907 114.593 c
280.907 114.532 280.943 114.448 281.052 114.448 c
281.185 114.448 281.197 114.520 281.221 114.750 c
281.462 116.841 l
281.499 117.167 281.438 117.167 281.136 117.167 c
275.215 117.167 l
274.973 117.167 274.852 117.167 274.852 116.925 c
274.852 116.792 274.961 116.792 275.191 116.792 c
275.638 116.792 275.976 116.792 275.976 116.575 c
275.976 116.526 275.976 116.502 275.916 116.285 c
274.321 109.892 l
274.200 109.421 274.176 109.324 273.221 109.324 c
273.016 109.324 272.883 109.324 272.883 109.094 c
272.883 108.950 273.028 108.950 273.064 108.950 c
273.414 108.950 274.309 108.986 274.659 108.986 c
275.058 108.986 276.061 108.950 276.460 108.950 c
276.568 108.950 276.713 108.950 276.713 109.179 c
276.713 109.276 276.641 109.300 276.641 109.312 c
276.605 109.324 276.580 109.324 276.303 109.324 c
276.037 109.324 275.976 109.324 275.674 109.348 c
275.324 109.384 275.287 109.433 275.287 109.590 c
275.287 109.614 275.287 109.687 275.336 109.868 c
276.085 112.877 l
f
313.539 169.283 m
314.675 169.283 l
314.916 169.283 315.037 169.283 315.037 169.525 c
315.037 169.658 314.916 169.658 314.699 169.658 c
313.636 169.658 l
314.070 171.374 314.131 171.615 314.131 171.688 c
314.131 171.893 313.986 172.014 313.780 172.014 c
313.744 172.014 313.406 172.002 313.297 171.579 c
312.826 169.658 l
311.690 169.658 l
311.448 169.658 311.327 169.658 311.327 169.428 c
311.327 169.283 311.424 169.283 311.666 169.283 c
312.729 169.283 l
311.859 165.851 311.811 165.646 311.811 165.428 c
311.811 164.776 312.270 164.317 312.923 164.317 c
314.155 164.317 314.844 166.081 314.844 166.178 c
314.844 166.298 314.747 166.298 314.699 166.298 c
314.590 166.298 314.578 166.262 314.518 166.129 c
313.998 164.872 313.358 164.582 312.947 164.582 c
312.693 164.582 312.572 164.739 312.572 165.138 c
312.572 165.428 312.596 165.513 312.645 165.718 c
313.539 169.283 l
f
*u
391.887 108.158 m
391.887 108.206 391.851 108.279 391.767 108.279 c
391.634 108.279 391.150 107.795 390.945 107.445 c
390.679 108.097 390.208 108.291 389.821 108.291 c
388.395 108.291 386.909 106.502 386.909 104.750 c
386.909 103.566 387.622 102.817 388.504 102.817 c
389.024 102.817 389.495 103.107 389.930 103.542 c
389.821 103.119 389.422 101.487 389.386 101.379 c
389.289 101.040 389.193 100.992 388.516 100.980 c
388.359 100.980 388.238 100.980 388.238 100.738 c
388.238 100.726 388.238 100.605 388.395 100.605 c
388.782 100.605 389.205 100.641 389.604 100.641 c
390.014 100.641 390.450 100.605 390.848 100.605 c
390.909 100.605 391.066 100.605 391.066 100.847 c
391.066 100.980 390.945 100.980 390.752 100.980 c
390.172 100.980 390.172 101.064 390.172 101.173 c
390.172 101.258 390.196 101.330 390.220 101.439 c
391.887 108.158 l
f
388.540 103.082 m
387.815 103.082 387.767 104.013 387.767 104.218 c
387.767 104.798 388.117 106.116 388.323 106.623 c
388.697 107.517 389.326 108.025 389.821 108.025 c
390.607 108.025 390.776 107.046 390.776 106.961 c
390.776 106.889 390.111 104.243 390.075 104.194 c
389.894 103.856 389.217 103.082 388.540 103.082 c
f
*U
*u
166.887 141.908 m
166.887 141.956 166.851 142.029 166.767 142.029 c
166.634 142.029 166.150 141.545 165.945 141.195 c
165.679 141.847 165.208 142.041 164.821 142.041 c
163.395 142.041 161.909 140.252 161.909 138.500 c
161.909 137.316 162.622 136.567 163.504 136.567 c
164.024 136.567 164.495 136.857 164.930 137.292 c
164.821 136.869 164.422 135.237 164.386 135.129 c
164.289 134.790 164.193 134.742 163.516 134.730 c
163.359 134.730 163.238 134.730 163.238 134.488 c
163.238 134.476 163.238 134.355 163.395 134.355 c
163.782 134.355 164.205 134.391 164.604 134.391 c
165.014 134.391 165.450 134.355 165.848 134.355 c
165.909 134.355 166.066 134.355 166.066 134.597 c
166.066 134.730 165.945 134.730 165.752 134.730 c
165.172 134.730 165.172 134.814 165.172 134.923 c
165.172 135.008 165.196 135.080 165.220 135.189 c
166.887 141.908 l
f
163.540 136.832 m
162.815 136.832 162.767 137.763 162.767 137.968 c
162.767 138.548 163.117 139.866 163.323 140.373 c
163.697 141.267 164.326 141.775 164.821 141.775 c
165.607 141.775 165.776 140.796 165.776 140.711 c
165.776 140.639 165.111 137.993 165.075 137.944 c
164.894 137.606 164.217 136.832 163.540 136.832 c
f
*U
0.00 0.00 0.00 1.00 k
169.297 143.678 m
169.353 143.799 169.378 143.847 169.378 143.944 c
169.378 144.217 169.128 144.403 168.894 144.403 c
168.628 144.403 168.499 144.217 168.443 144.048 c
167.307 140.544 l
167.267 140.439 167.267 140.423 167.267 140.415 c
167.267 140.302 167.525 140.214 167.597 140.214 c
167.670 140.214 167.710 140.286 167.734 140.343 c
169.297 143.678 l
f
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
