%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Jaan Kalda) (IOC)
%%Title: (gps.xar)
%%CreationDate: (06/03/09) (11:59 PM)
%%BoundingBox: 50 154 280 378
%%AWColourTable
%%+h (_103683496) 0.0 0.0 0.0
%%+h (_103683568) 0.0 0.0 0.0
%%+h (_103683712) 0.0 0.0 0.0
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995-2006 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (_103683496) 0 1 XX
0.500 w
2 j
[ ] 0 d
0 J
0.00 0.00 0.00 (_103683568) 0 1 Xx
64.921 373.829 m
64.921 166.167 l
275.688 166.167 l
S
62.921 372.829 m
64.921 373.495 l
66.920 372.829 l
64.921 378.828 l
f
274.688 168.166 m
275.354 166.167 l
274.688 164.167 l
280.687 166.167 l
f
0.188 w
[ 0.375 0.375 ] 0 d
79.848 356.261 m
79.848 165.915 l
S
[ 0.375 0.375 ] 0 d
94.851 356.261 m
94.851 165.915 l
S
[ 0.375 0.375 ] 0 d
109.855 356.261 m
109.855 165.915 l
S
[ 0.375 0.375 ] 0 d
124.858 356.261 m
124.858 165.915 l
S
[ 0.375 0.375 ] 0 d
139.862 356.261 m
139.862 165.915 l
S
[ 0.375 0.375 ] 0 d
154.866 356.261 m
154.866 165.915 l
S
[ 0.375 0.375 ] 0 d
169.869 356.261 m
169.869 165.915 l
S
[ 0.375 0.375 ] 0 d
184.873 356.261 m
184.873 165.915 l
S
[ 0.375 0.375 ] 0 d
199.877 356.261 m
199.877 165.915 l
S
[ 0.375 0.375 ] 0 d
214.880 356.261 m
214.880 165.915 l
S
[ 0.375 0.375 ] 0 d
229.884 356.261 m
229.884 165.915 l
S
[ 0.375 0.375 ] 0 d
244.888 356.261 m
244.888 165.915 l
S
0.500 w
[ ] 0 d
64.101 298.068 m
139.162 298.068 l
154.851 260.952 l
170.230 201.151 l
184.851 333.498 l
250.851 333.498 l
S
0.250 w
73.358 372.439 m
75.052 372.802 l
75.173 372.513 75.270 372.218 75.345 371.917 c
75.450 371.476 75.536 370.952 75.602 370.347 c
75.634 370.042 75.677 369.398 75.731 368.413 c
76.219 368.953 76.510 369.287 76.604 369.415 c
77.120 370.115 77.417 370.525 77.495 370.646 c
77.624 370.853 77.714 371.034 77.764 371.191 c
77.807 371.308 77.829 371.419 77.829 371.525 c
77.829 371.626 77.738 371.743 77.556 371.876 c
77.375 372.009 77.284 372.158 77.284 372.322 c
77.284 372.447 77.334 372.558 77.433 372.656 c
77.533 372.753 77.651 372.802 77.788 372.802 c
77.952 372.802 78.096 372.735 78.221 372.600 c
78.346 372.465 78.409 372.298 78.409 372.099 c
78.409 371.900 78.378 371.708 78.315 371.525 c
78.214 371.228 78.024 370.865 77.747 370.438 c
77.469 370.010 77.022 369.437 76.405 368.718 c
76.327 368.628 75.893 368.175 75.104 367.359 c
74.888 367.359 l
74.794 369.831 74.598 371.374 74.302 371.988 c
74.204 372.187 74.042 372.286 73.815 372.286 c
73.718 372.286 73.579 372.269 73.399 372.234 c
73.358 372.439 l
f
85.153 365.150 m
85.153 364.933 l
84.563 365.230 84.071 365.578 83.676 365.976 c
83.114 366.543 82.680 367.211 82.376 367.980 c
82.071 368.749 81.919 369.548 81.919 370.376 c
81.919 371.587 82.217 372.692 82.815 373.690 c
83.413 374.688 84.192 375.401 85.153 375.831 c
85.153 375.585 l
84.672 375.319 84.278 374.956 83.969 374.495 c
83.661 374.034 83.430 373.450 83.278 372.743 c
83.126 372.036 83.049 371.298 83.049 370.529 c
83.049 369.693 83.114 368.933 83.243 368.249 c
83.344 367.710 83.467 367.278 83.612 366.952 c
83.756 366.626 83.951 366.312 84.195 366.011 c
84.439 365.710 84.758 365.423 85.153 365.150 c
f
87.385 375.831 m
87.385 370.488 l
88.750 371.736 l
89.039 372.001 89.207 372.169 89.254 372.239 c
89.286 372.286 89.301 372.333 89.301 372.380 c
89.301 372.458 89.269 372.526 89.204 372.582 c
89.140 372.639 89.034 372.671 88.885 372.679 c
88.885 372.866 l
91.217 372.866 l
91.217 372.679 l
90.897 372.671 90.630 372.622 90.417 372.532 c
90.204 372.443 89.971 372.282 89.717 372.052 c
88.340 370.781 l
89.717 369.040 l
90.100 368.560 90.358 368.255 90.491 368.126 c
90.678 367.943 90.842 367.824 90.983 367.769 c
91.080 367.730 91.250 367.710 91.492 367.710 c
91.492 367.500 l
88.885 367.500 l
88.885 367.710 l
89.034 367.714 89.134 367.737 89.187 367.778 c
89.240 367.819 89.266 367.876 89.266 367.951 c
89.266 368.040 89.188 368.185 89.032 368.384 c
87.385 370.488 l
87.385 368.706 l
87.385 368.359 87.410 368.130 87.459 368.021 c
87.507 367.912 87.577 367.833 87.667 367.787 c
87.756 367.740 87.952 367.714 88.252 367.710 c
88.252 367.500 l
85.522 367.500 l
85.522 367.710 l
85.795 367.710 86.001 367.744 86.137 367.810 c
86.219 367.853 86.282 367.919 86.325 368.009 c
86.383 368.138 86.413 368.361 86.413 368.677 c
86.413 373.564 l
86.413 374.185 86.399 374.564 86.372 374.703 c
86.344 374.842 86.299 374.937 86.237 374.990 c
86.174 375.043 86.092 375.069 85.991 375.069 c
85.909 375.069 85.786 375.036 85.622 374.970 c
85.522 375.175 l
87.116 375.831 l
87.385 375.831 l
f
93.391 371.882 m
93.782 372.273 94.012 372.497 94.083 372.556 c
94.258 372.704 94.448 372.820 94.651 372.902 c
94.854 372.984 95.055 373.025 95.254 373.024 c
95.590 373.025 95.879 372.927 96.121 372.732 c
96.364 372.536 96.526 372.253 96.608 371.882 c
97.010 372.351 97.350 372.658 97.627 372.805 c
97.904 372.951 98.190 373.025 98.483 373.024 c
98.768 373.025 99.021 372.951 99.241 372.805 c
99.462 372.658 99.637 372.419 99.766 372.087 c
99.852 371.861 99.895 371.505 99.895 371.021 c
99.895 368.712 l
99.895 368.376 99.920 368.146 99.971 368.021 c
100.010 367.935 100.082 367.862 100.188 367.801 c
100.293 367.741 100.465 367.710 100.703 367.710 c
100.703 367.500 l
98.055 367.500 l
98.055 367.710 l
98.166 367.710 l
98.397 367.710 98.576 367.755 98.705 367.845 c
98.795 367.908 98.860 368.007 98.899 368.144 c
98.914 368.210 98.922 368.400 98.922 368.712 c
98.922 371.021 l
98.922 371.458 98.869 371.767 98.764 371.947 c
98.612 372.197 98.367 372.322 98.031 372.322 c
97.824 372.322 97.616 372.270 97.407 372.166 c
97.199 372.063 96.946 371.870 96.649 371.589 c
96.637 371.525 l
96.649 371.273 l
96.649 368.712 l
96.649 368.345 96.669 368.117 96.710 368.027 c
96.751 367.937 96.828 367.862 96.942 367.801 c
97.055 367.741 97.248 367.710 97.522 367.710 c
97.522 367.500 l
94.809 367.500 l
94.809 367.710 l
95.106 367.710 95.310 367.746 95.421 367.816 c
95.533 367.886 95.610 367.992 95.653 368.132 c
95.672 368.199 95.682 368.392 95.682 368.712 c
95.682 371.021 l
95.682 371.458 95.618 371.773 95.489 371.964 c
95.317 372.214 95.076 372.339 94.768 372.339 c
94.557 372.339 94.348 372.282 94.141 372.169 c
93.817 371.997 93.567 371.804 93.391 371.589 c
93.391 368.712 l
93.391 368.361 93.416 368.132 93.464 368.027 c
93.513 367.921 93.586 367.842 93.681 367.789 c
93.777 367.737 93.971 367.710 94.264 367.710 c
94.264 367.500 l
91.610 367.500 l
91.610 367.710 l
91.856 367.710 92.028 367.737 92.126 367.789 c
92.223 367.842 92.297 367.926 92.348 368.041 c
92.399 368.157 92.424 368.380 92.424 368.712 c
92.424 370.763 l
92.424 371.353 92.407 371.734 92.372 371.906 c
92.344 372.034 92.301 372.123 92.243 372.172 c
92.184 372.221 92.104 372.245 92.002 372.245 c
91.893 372.245 91.762 372.216 91.610 372.157 c
91.522 372.368 l
93.139 373.024 l
93.391 373.024 l
93.391 371.882 l
f
106.933 375.831 m
102.469 367.318 l
101.953 367.318 l
106.447 375.831 l
106.933 375.831 l
f
109.142 375.831 m
109.142 371.906 l
109.575 372.382 109.919 372.688 110.173 372.822 c
110.427 372.957 110.680 373.025 110.934 373.024 c
111.239 373.025 111.501 372.941 111.720 372.773 c
111.938 372.605 112.100 372.341 112.206 371.982 c
112.280 371.732 112.317 371.275 112.317 370.611 c
112.317 368.712 l
112.317 368.373 112.345 368.140 112.399 368.015 c
112.438 367.921 112.505 367.847 112.598 367.792 c
112.692 367.738 112.864 367.710 113.114 367.710 c
113.114 367.500 l
110.477 367.500 l
110.477 367.710 l
110.600 367.710 l
110.850 367.710 111.024 367.748 111.122 367.825 c
111.220 367.901 111.288 368.013 111.327 368.162 c
111.339 368.224 111.345 368.408 111.345 368.712 c
111.345 370.611 l
111.345 371.197 111.314 371.581 111.254 371.765 c
111.193 371.948 111.097 372.086 110.964 372.178 c
110.831 372.270 110.671 372.316 110.483 372.316 c
110.292 372.316 110.093 372.265 109.886 372.163 c
109.679 372.062 109.431 371.857 109.142 371.548 c
109.142 368.712 l
109.142 368.345 109.162 368.117 109.203 368.027 c
109.244 367.937 109.320 367.862 109.432 367.801 c
109.543 367.741 109.735 367.710 110.009 367.710 c
110.009 367.500 l
107.349 367.500 l
107.349 367.710 l
107.587 367.710 107.774 367.748 107.911 367.822 c
107.989 367.861 108.052 367.935 108.099 368.044 c
108.145 368.154 108.169 368.376 108.169 368.712 c
108.169 373.569 l
108.169 374.183 108.154 374.560 108.125 374.700 c
108.096 374.841 108.051 374.937 107.990 374.987 c
107.930 375.038 107.849 375.064 107.747 375.064 c
107.665 375.064 107.532 375.032 107.349 374.970 c
107.267 375.175 l
108.872 375.831 l
109.142 375.831 l
f
113.460 375.585 m
113.460 375.831 l
114.054 375.538 114.548 375.192 114.942 374.794 c
115.501 374.224 115.932 373.555 116.237 372.787 c
116.542 372.020 116.694 371.220 116.694 370.388 c
116.694 369.177 116.396 368.073 115.801 367.075 c
115.205 366.077 114.425 365.363 113.460 364.933 c
113.460 365.150 l
113.940 365.420 114.336 365.784 114.646 366.243 c
114.957 366.702 115.188 367.286 115.338 367.995 c
115.488 368.703 115.563 369.443 115.563 370.212 c
115.563 371.044 115.499 371.804 115.370 372.491 c
115.272 373.030 115.150 373.462 115.004 373.786 c
114.857 374.110 114.663 374.423 114.421 374.724 c
114.179 375.024 113.858 375.312 113.460 375.585 c
f
250.967 177.755 m
250.511 176.161 l
251.430 176.161 l
251.331 175.792 l
250.417 175.792 l
249.409 172.335 l
249.300 171.964 249.245 171.724 249.245 171.615 c
249.245 171.548 249.261 171.498 249.292 171.462 c
249.323 171.427 249.360 171.410 249.403 171.410 c
249.501 171.410 249.630 171.478 249.790 171.615 c
249.884 171.693 250.093 171.933 250.417 172.335 c
250.610 172.189 l
250.251 171.665 249.911 171.296 249.591 171.081 c
249.372 170.933 249.151 170.859 248.929 170.859 c
248.757 170.859 248.616 170.913 248.507 171.020 c
248.397 171.127 248.343 171.265 248.343 171.433 c
248.343 171.644 248.405 171.966 248.530 172.400 c
249.509 175.792 l
248.624 175.792 l
248.682 176.021 l
249.112 176.138 249.470 176.313 249.755 176.545 c
250.040 176.777 250.358 177.181 250.710 177.755 c
250.967 177.755 l
f
257.911 168.650 m
257.911 168.433 l
257.321 168.730 256.829 169.078 256.434 169.476 c
255.872 170.043 255.438 170.711 255.134 171.480 c
254.829 172.249 254.677 173.048 254.677 173.876 c
254.677 175.087 254.975 176.192 255.573 177.190 c
256.171 178.188 256.950 178.901 257.911 179.331 c
257.911 179.085 l
257.430 178.819 257.036 178.456 256.727 177.995 c
256.419 177.534 256.188 176.950 256.036 176.243 c
255.884 175.536 255.807 174.798 255.807 174.029 c
255.807 173.193 255.872 172.433 256.001 171.749 c
256.102 171.210 256.225 170.778 256.370 170.452 c
256.514 170.126 256.709 169.812 256.953 169.511 c
257.197 169.210 257.516 168.923 257.911 168.650 c
f
260.149 175.382 m
260.540 175.773 260.770 175.997 260.841 176.056 c
261.016 176.204 261.206 176.320 261.409 176.402 c
261.612 176.484 261.813 176.525 262.012 176.524 c
262.348 176.525 262.637 176.427 262.879 176.232 c
263.122 176.036 263.284 175.753 263.366 175.382 c
263.768 175.851 264.108 176.158 264.385 176.305 c
264.662 176.451 264.948 176.525 265.241 176.524 c
265.526 176.525 265.779 176.451 265.999 176.305 c
266.220 176.158 266.395 175.919 266.524 175.587 c
266.610 175.361 266.653 175.005 266.653 174.521 c
266.653 172.212 l
266.653 171.876 266.678 171.646 266.729 171.521 c
266.768 171.435 266.840 171.362 266.946 171.301 c
267.051 171.241 267.223 171.210 267.461 171.210 c
267.461 171 l
264.813 171 l
264.813 171.210 l
264.924 171.210 l
265.155 171.210 265.334 171.255 265.463 171.345 c
265.553 171.408 265.618 171.507 265.657 171.644 c
265.672 171.710 265.680 171.900 265.680 172.212 c
265.680 174.521 l
265.680 174.958 265.627 175.267 265.522 175.447 c
265.370 175.697 265.125 175.822 264.789 175.822 c
264.582 175.822 264.374 175.770 264.165 175.666 c
263.957 175.563 263.704 175.370 263.407 175.089 c
263.395 175.025 l
263.407 174.773 l
263.407 172.212 l
263.407 171.845 263.427 171.617 263.468 171.527 c
263.509 171.437 263.586 171.362 263.700 171.301 c
263.813 171.241 264.006 171.210 264.280 171.210 c
264.280 171 l
261.567 171 l
261.567 171.210 l
261.864 171.210 262.068 171.246 262.179 171.316 c
262.291 171.386 262.368 171.492 262.411 171.632 c
262.430 171.699 262.440 171.892 262.440 172.212 c
262.440 174.521 l
262.440 174.958 262.376 175.273 262.247 175.464 c
262.075 175.714 261.834 175.839 261.526 175.839 c
261.315 175.839 261.106 175.782 260.899 175.669 c
260.575 175.497 260.325 175.304 260.149 175.089 c
260.149 172.212 l
260.149 171.861 260.174 171.632 260.222 171.527 c
260.271 171.421 260.344 171.342 260.439 171.289 c
260.535 171.237 260.729 171.210 261.022 171.210 c
261.022 171 l
258.368 171 l
258.368 171.210 l
258.614 171.210 258.786 171.237 258.884 171.289 c
258.981 171.342 259.055 171.426 259.106 171.541 c
259.157 171.657 259.182 171.880 259.182 172.212 c
259.182 174.263 l
259.182 174.853 259.165 175.234 259.130 175.406 c
259.102 175.534 259.059 175.623 259.001 175.672 c
258.942 175.721 258.862 175.745 258.760 175.745 c
258.651 175.745 258.520 175.716 258.368 175.657 c
258.280 175.868 l
259.897 176.524 l
260.149 176.524 l
260.149 175.382 l
f
*u
269.255 179.331 m
269.419 179.331 269.558 179.273 269.674 179.158 c
269.789 179.043 269.846 178.903 269.846 178.739 c
269.846 178.575 269.789 178.435 269.674 178.317 c
269.558 178.200 269.419 178.142 269.255 178.142 c
269.091 178.142 268.950 178.200 268.833 178.317 c
268.716 178.435 268.657 178.575 268.657 178.739 c
268.657 178.903 268.715 179.043 268.830 179.158 c
268.945 179.273 269.087 179.331 269.255 179.331 c
f
269.741 176.524 m
269.741 172.212 l
269.741 171.876 269.765 171.653 269.814 171.541 c
269.863 171.430 269.935 171.347 270.031 171.292 c
270.127 171.238 270.301 171.210 270.555 171.210 c
270.555 171 l
267.948 171 l
267.948 171.210 l
268.210 171.210 268.386 171.236 268.475 171.287 c
268.565 171.337 268.637 171.421 268.689 171.538 c
268.742 171.656 268.768 171.880 268.768 172.212 c
268.768 174.281 l
268.768 174.863 268.751 175.239 268.716 175.411 c
268.688 175.536 268.645 175.623 268.587 175.672 c
268.528 175.721 268.448 175.745 268.346 175.745 c
268.237 175.745 268.104 175.716 267.948 175.657 c
267.866 175.868 l
269.483 176.524 l
269.741 176.524 l
f
*U
272.788 175.388 m
273.417 176.146 274.016 176.525 274.587 176.524 c
274.880 176.525 275.131 176.451 275.342 176.305 c
275.553 176.158 275.721 175.917 275.846 175.581 c
275.932 175.347 275.975 174.988 275.975 174.503 c
275.975 172.212 l
275.975 171.873 276.003 171.642 276.057 171.521 c
276.100 171.423 276.170 171.347 276.265 171.292 c
276.361 171.238 276.538 171.210 276.795 171.210 c
276.795 171 l
274.141 171 l
274.141 171.210 l
274.253 171.210 l
274.503 171.210 274.677 171.248 274.777 171.325 c
274.877 171.401 274.946 171.513 274.985 171.662 c
275.001 171.720 275.008 171.904 275.008 172.212 c
275.008 174.409 l
275.008 174.898 274.945 175.252 274.818 175.473 c
274.691 175.694 274.477 175.804 274.176 175.804 c
273.711 175.804 273.249 175.550 272.788 175.042 c
272.788 172.212 l
272.788 171.849 272.809 171.624 272.852 171.538 c
272.907 171.425 272.982 171.342 273.078 171.289 c
273.174 171.237 273.368 171.210 273.661 171.210 c
273.661 171 l
271.007 171 l
271.007 171.210 l
271.124 171.210 l
271.397 171.210 271.582 171.280 271.678 171.418 c
271.773 171.557 271.821 171.822 271.821 172.212 c
271.821 174.204 l
271.821 174.849 271.806 175.242 271.777 175.382 c
271.748 175.523 271.703 175.618 271.642 175.669 c
271.582 175.720 271.501 175.745 271.399 175.745 c
271.290 175.745 271.159 175.716 271.007 175.657 c
270.919 175.868 l
272.536 176.524 l
272.788 176.524 l
272.788 175.388 l
f
277.118 179.085 m
277.118 179.331 l
277.712 179.038 278.206 178.692 278.600 178.294 c
279.159 177.724 279.590 177.055 279.895 176.287 c
280.200 175.520 280.352 174.720 280.352 173.888 c
280.352 172.677 280.054 171.573 279.459 170.575 c
278.863 169.577 278.083 168.863 277.118 168.433 c
277.118 168.650 l
277.598 168.920 277.994 169.284 278.304 169.743 c
278.615 170.202 278.846 170.786 278.996 171.495 c
279.146 172.203 279.221 172.943 279.221 173.712 c
279.221 174.544 279.157 175.304 279.028 175.991 c
278.930 176.530 278.808 176.962 278.662 177.286 c
278.515 177.610 278.321 177.923 278.079 178.224 c
277.837 178.524 277.516 178.812 277.118 179.085 c
f
54.326 342 m
53.447 342 l
53.447 347.600 l
53.236 347.398 52.958 347.196 52.615 346.995 c
52.271 346.793 51.963 346.641 51.689 346.540 c
51.689 347.390 l
52.181 347.621 52.611 347.901 52.978 348.230 c
53.346 348.559 53.607 348.878 53.760 349.187 c
54.326 349.187 l
54.326 342 l
f
56.577 343.874 m
57.500 343.953 l
57.569 343.503 57.727 343.166 57.976 342.939 c
58.226 342.713 58.526 342.600 58.877 342.600 c
59.300 342.600 59.659 342.760 59.951 343.079 c
60.244 343.398 60.391 343.821 60.391 344.348 c
60.391 344.849 60.250 345.245 59.969 345.535 c
59.687 345.824 59.318 345.969 58.863 345.969 c
58.579 345.969 58.324 345.905 58.096 345.776 c
57.868 345.648 57.689 345.481 57.559 345.276 c
56.734 345.383 l
57.427 349.060 l
60.987 349.060 l
60.987 348.220 l
58.130 348.220 l
57.745 346.296 l
58.174 346.596 58.625 346.745 59.097 346.745 c
59.722 346.745 60.249 346.529 60.679 346.096 c
61.109 345.663 61.323 345.107 61.323 344.426 c
61.323 343.778 61.135 343.218 60.757 342.747 c
60.298 342.167 59.672 341.877 58.877 341.877 c
58.226 341.877 57.695 342.060 57.283 342.424 c
56.871 342.789 56.636 343.272 56.577 343.874 c
f
54.326 282.746 m
53.447 282.746 l
53.447 288.346 l
53.236 288.144 52.958 287.942 52.615 287.741 c
52.271 287.539 51.963 287.387 51.689 287.286 c
51.689 288.136 l
52.181 288.367 52.611 288.647 52.978 288.976 c
53.346 289.305 53.607 289.624 53.760 289.933 c
54.326 289.933 l
54.326 282.746 l
f
*u
56.577 286.276 m
56.577 287.122 56.665 287.803 56.839 288.319 c
57.013 288.835 57.272 289.233 57.615 289.513 c
57.958 289.793 58.391 289.933 58.911 289.933 c
59.296 289.933 59.632 289.855 59.922 289.701 c
60.212 289.546 60.451 289.323 60.640 289.032 c
60.829 288.741 60.977 288.386 61.084 287.968 c
61.192 287.549 61.245 286.985 61.245 286.276 c
61.245 285.436 61.159 284.758 60.987 284.242 c
60.814 283.726 60.556 283.327 60.213 283.046 c
59.869 282.764 59.436 282.623 58.911 282.623 c
58.221 282.623 57.679 282.871 57.286 283.366 c
56.813 283.961 56.577 284.931 56.577 286.276 c
f
57.481 286.276 m
57.481 285.101 57.618 284.319 57.893 283.929 c
58.168 283.541 58.508 283.346 58.911 283.346 c
59.315 283.346 59.654 283.541 59.929 283.932 c
60.205 284.323 60.342 285.104 60.342 286.276 c
60.342 287.454 60.205 288.237 59.929 288.624 c
59.654 289.012 59.312 289.205 58.902 289.205 c
58.498 289.205 58.176 289.034 57.935 288.693 c
57.632 288.256 57.481 287.451 57.481 286.276 c
f
*U
51.015 223.865 m
51.938 223.944 l
52.007 223.494 52.165 223.157 52.414 222.930 c
52.664 222.704 52.964 222.591 53.315 222.591 c
53.738 222.591 54.097 222.751 54.389 223.070 c
54.682 223.389 54.829 223.812 54.829 224.339 c
54.829 224.840 54.688 225.236 54.407 225.526 c
54.125 225.815 53.756 225.960 53.301 225.960 c
53.017 225.960 52.762 225.896 52.534 225.767 c
52.306 225.639 52.127 225.472 51.997 225.267 c
51.172 225.374 l
51.865 229.051 l
55.425 229.051 l
55.425 228.211 l
52.568 228.211 l
52.183 226.287 l
52.612 226.587 53.063 226.736 53.535 226.736 c
54.160 226.736 54.687 226.520 55.117 226.087 c
55.547 225.654 55.761 225.098 55.761 224.417 c
55.761 223.769 55.573 223.209 55.195 222.738 c
54.736 222.158 54.110 221.868 53.315 221.868 c
52.664 221.868 52.133 222.051 51.721 222.415 c
51.309 222.780 51.074 223.263 51.015 223.865 c
f
124.826 155.250 m
123.947 155.250 l
123.947 160.850 l
123.736 160.648 123.458 160.446 123.115 160.245 c
122.771 160.043 122.463 159.891 122.189 159.790 c
122.189 160.640 l
122.681 160.871 123.111 161.151 123.478 161.480 c
123.846 161.809 124.107 162.128 124.260 162.437 c
124.826 162.437 l
124.826 155.250 l
f
185.688 156.094 m
185.688 155.250 l
180.956 155.250 l
180.950 155.461 180.984 155.664 181.059 155.860 c
181.179 156.182 181.372 156.499 181.637 156.812 c
181.903 157.124 182.286 157.486 182.787 157.896 c
183.565 158.534 184.091 159.039 184.364 159.412 c
184.638 159.785 184.775 160.137 184.775 160.469 c
184.775 160.817 184.650 161.111 184.401 161.350 c
184.152 161.590 183.827 161.709 183.427 161.709 c
183.004 161.709 182.665 161.582 182.411 161.329 c
182.157 161.075 182.029 160.723 182.026 160.274 c
181.122 160.367 l
181.184 161.040 181.417 161.554 181.820 161.907 c
182.224 162.260 182.766 162.437 183.446 162.437 c
184.133 162.437 184.677 162.246 185.077 161.866 c
185.478 161.485 185.678 161.013 185.678 160.450 c
185.678 160.163 185.619 159.881 185.502 159.605 c
185.385 159.328 185.190 159.037 184.919 158.731 c
184.647 158.425 184.195 158.005 183.564 157.471 c
183.036 157.028 182.698 156.728 182.548 156.570 c
182.398 156.412 182.275 156.254 182.177 156.094 c
185.688 156.094 l
f
241.005 157.139 m
241.884 157.256 l
241.985 156.758 242.157 156.399 242.399 156.180 c
242.642 155.960 242.937 155.850 243.286 155.850 c
243.699 155.850 244.048 155.993 244.333 156.280 c
244.618 156.566 244.760 156.921 244.760 157.344 c
244.760 157.748 244.628 158.081 244.365 158.343 c
244.101 158.605 243.766 158.736 243.359 158.736 c
243.193 158.736 242.986 158.703 242.739 158.638 c
242.836 159.410 l
242.895 159.403 242.942 159.400 242.978 159.400 c
243.352 159.400 243.689 159.497 243.989 159.693 c
244.288 159.888 244.438 160.189 244.438 160.596 c
244.438 160.918 244.329 161.185 244.111 161.397 c
243.893 161.608 243.611 161.714 243.266 161.714 c
242.924 161.714 242.639 161.607 242.412 161.392 c
242.184 161.177 242.037 160.855 241.972 160.425 c
241.093 160.581 l
241.201 161.171 241.445 161.627 241.826 161.951 c
242.207 162.275 242.680 162.437 243.247 162.437 c
243.637 162.437 243.997 162.353 244.326 162.185 c
244.654 162.018 244.906 161.789 245.080 161.499 c
245.254 161.210 245.341 160.902 245.341 160.576 c
245.341 160.267 245.258 159.986 245.092 159.732 c
244.926 159.478 244.681 159.276 244.355 159.126 c
244.778 159.029 245.107 158.826 245.341 158.518 c
245.576 158.211 245.693 157.826 245.693 157.364 c
245.693 156.739 245.465 156.209 245.009 155.774 c
244.553 155.340 243.977 155.123 243.281 155.123 c
242.653 155.123 242.131 155.310 241.716 155.684 c
241.301 156.058 241.064 156.543 241.005 157.139 c
f
0.188 w
[ 0.375 0.375 ] 0 d
66.445 166.189 m
256.791 166.189 l
S
[ 0.375 0.375 ] 0 d
66.445 178.142 m
256.791 178.142 l
S
[ 0.375 0.375 ] 0 d
66.445 190.096 m
256.791 190.096 l
S
[ 0.375 0.375 ] 0 d
66.445 202.050 m
256.791 202.050 l
S
[ 0.375 0.375 ] 0 d
66.445 214.003 m
256.791 214.003 l
S
[ 0.375 0.375 ] 0 d
66.445 225.957 m
256.791 225.957 l
S
[ 0.375 0.375 ] 0 d
66.445 237.911 m
256.791 237.911 l
S
[ 0.375 0.375 ] 0 d
66.445 249.865 m
256.791 249.865 l
S
[ 0.375 0.375 ] 0 d
66.445 261.818 m
256.791 261.818 l
S
[ 0.375 0.375 ] 0 d
66.445 273.772 m
256.791 273.772 l
S
[ 0.375 0.375 ] 0 d
66.445 285.726 m
256.791 285.726 l
S
[ 0.375 0.375 ] 0 d
66.445 297.680 m
256.791 297.680 l
S
[ 0.375 0.375 ] 0 d
66.445 309.633 m
256.791 309.633 l
S
[ 0.375 0.375 ] 0 d
66.445 321.587 m
256.791 321.587 l
S
[ 0.375 0.375 ] 0 d
66.445 333.541 m
256.791 333.541 l
S
[ 0.375 0.375 ] 0 d
66.445 345.495 m
256.791 345.495 l
S
0.00 0.00 0.00 XA
0.500 w
[ ] 0 d
0.00 0.00 0.00 Xa
79.839 298.472 m
80.417 298.472 80.887 298.002 80.887 297.424 c
80.887 296.846 80.417 296.376 79.839 296.376 c
79.261 296.376 78.791 296.846 78.791 297.424 c
78.791 298.002 79.261 298.472 79.839 298.472 c
b
94.677 298.472 m
95.255 298.472 95.725 298.002 95.725 297.424 c
95.725 296.846 95.255 296.376 94.677 296.376 c
94.099 296.376 93.629 296.846 93.629 297.424 c
93.629 298.002 94.099 298.472 94.677 298.472 c
b
109.818 298.472 m
110.396 298.472 110.866 298.002 110.866 297.424 c
110.866 296.846 110.396 296.376 109.818 296.376 c
109.240 296.376 108.770 296.846 108.770 297.424 c
108.770 298.002 109.240 298.472 109.818 298.472 c
b
65.419 298.472 m
65.997 298.472 66.467 298.002 66.467 297.424 c
66.467 296.846 65.997 296.376 65.419 296.376 c
64.841 296.376 64.371 296.846 64.371 297.424 c
64.371 298.002 64.841 298.472 65.419 298.472 c
b
124.630 298.472 m
125.208 298.472 125.678 298.002 125.678 297.424 c
125.678 296.846 125.208 296.376 124.630 296.376 c
124.052 296.376 123.582 296.846 123.582 297.424 c
123.582 298.002 124.052 298.472 124.630 298.472 c
b
139.040 298.472 m
139.618 298.472 140.088 298.002 140.088 297.424 c
140.088 296.846 139.618 296.376 139.040 296.376 c
138.462 296.376 137.992 296.846 137.992 297.424 c
137.992 298.002 138.462 298.472 139.040 298.472 c
b
154.594 262.432 m
155.172 262.432 155.642 261.962 155.642 261.384 c
155.642 260.806 155.172 260.336 154.594 260.336 c
154.016 260.336 153.546 260.806 153.546 261.384 c
153.546 261.962 154.016 262.432 154.594 262.432 c
b
169.769 203.250 m
170.347 203.250 170.817 202.780 170.817 202.202 c
170.817 201.624 170.347 201.154 169.769 201.154 c
169.191 201.154 168.721 201.624 168.721 202.202 c
168.721 202.780 169.191 203.250 169.769 203.250 c
b
184.796 334.423 m
185.374 334.423 185.844 333.953 185.844 333.375 c
185.844 332.797 185.374 332.327 184.796 332.327 c
184.218 332.327 183.748 332.797 183.748 333.375 c
183.748 333.953 184.218 334.423 184.796 334.423 c
b
199.969 334.423 m
200.547 334.423 201.017 333.953 201.017 333.375 c
201.017 332.797 200.547 332.327 199.969 332.327 c
199.391 332.327 198.921 332.797 198.921 333.375 c
198.921 333.953 199.391 334.423 199.969 334.423 c
b
214.594 334.423 m
215.172 334.423 215.642 333.953 215.642 333.375 c
215.642 332.797 215.172 332.327 214.594 332.327 c
214.016 332.327 213.546 332.797 213.546 333.375 c
213.546 333.953 214.016 334.423 214.594 334.423 c
b
229.787 334.423 m
230.365 334.423 230.835 333.953 230.835 333.375 c
230.835 332.797 230.365 332.327 229.787 332.327 c
229.209 332.327 228.739 332.797 228.739 333.375 c
228.739 333.953 229.209 334.423 229.787 334.423 c
b
244.903 334.423 m
245.481 334.423 245.951 333.953 245.951 333.375 c
245.951 332.797 245.481 332.327 244.903 332.327 c
244.325 332.327 243.855 332.797 243.855 333.375 c
243.855 333.953 244.325 334.423 244.903 334.423 c
b
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
