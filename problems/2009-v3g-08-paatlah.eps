%!PS-Adobe-2.0 EPSF-1.2
%%Creator: Xara X
%%For: (Jaan Kalda) (IOC)
%%Title: (paatlah.xar)
%%CreationDate: (06/03/09) (11:54 PM)
%%BoundingBox: 16 154 364 400
%%AWColourTable
%%+h (_103513856) 0.0 0.0 0.0
%%+h (_57179160) 0.0 0.0 0.0
%%+h (_57178872) 0.0 0.0 0.0
%%+r (_103681984) 1.000 0.000 0.000
%%EndComments
%%BeginProlog

%%BeginResource: procset XaraStudio1Dict
% Copyright (c) 1995-2006 Xara Ltd
/XaraStudio1Dict 300 dict def XaraStudio1Dict begin
/bd{bind def}bind def/ld{load def}bind def/xd{exch def}bind def/sv{save}bd
/rs{restore}bd/gs{gsave}bd/gr{grestore}bd/bg{begin}bd/en{end}bd/level2
/languagelevel where{pop languagelevel 2 ge}{false}ifelse def/setseps{
/v_gseps xd}bd/setplate{/v_plate xd}bd/setkgray{/v_keyg xd}bd/setmono{
/v_mono xd}bd/rgb2gray{0.109 mul exch 0.586 mul add exch 0.305 mul
add}bd/cmyk2rgb{3{dup 5 -1 roll add dup 1 gt{pop 1}if 1 exch sub exch}repeat
pop}bd/rgb2cmyk{3{1.0 exch sub 3 1 roll}repeat 3 copy 2 copy gt{exch}if
pop 2 copy gt{exch}if pop dup 0.5 gt{0.5 sub dup 3{5 1 roll dup 3 1
roll sub}repeat 5 1 roll pop}{pop 0}ifelse}bd/cmyk2hsb{3{dup 5 -1 roll
add 1 exch sub dup 0 lt{pop 0}if exch}repeat pop rgb2hsb}bd/rgb2hsb{setrgbcolor
currenthsbcolor}bd/readcurve{exch 255.0 mul 0.5 add cvi get 255.0 div}bd
/rgb2devcmyk{3 copy dup 3 1 roll eq 3 1 roll eq v_keyg 1 eq and and{pop
pop 1 exch sub 0 0 0 4 -1 roll}{/ucurve where{pop 3{1.0 exch sub 3
1 roll}repeat 3 copy 2 copy gt{exch}if pop 2 copy gt{exch}if pop dup
ucurve readcurve exch bcurve readcurve clamp01 3{5 1 roll dup 3 1 roll
sub clamp01}repeat 5 1 roll pop 4 1 roll ycurve readcurve 4 1 roll
mcurve readcurve 4 1 roll ccurve readcurve 4 1 roll}{rgb2cmyk}ifelse}ifelse}def
/rgb2keyG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop}{Max3}ifelse
1 exch sub bcurve readcurve clamp01}bd/rgb2key{Max3 1 exch sub bcurve
readcurve clamp01}bd/rgb2cyanG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop
pop pop 0}{rgb2cyan}ifelse}bd/rgb2cyan{3 copy Max3 1 exch sub ucurve
readcurve 4 1 roll pop pop 1 exch sub exch sub ccurve readcurve clamp01}bd
/rgb2magentaG{3 copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2magenta}ifelse}bd
/rgb2magenta{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll pop
1 exch sub 3 1 roll pop sub mcurve readcurve clamp01}bd/rgb2yellowG{3
copy dup 3 1 roll eq 3 1 roll eq and{pop pop pop 0}{rgb2yellow}ifelse}bd
/rgb2yellow{3 copy Max3 1 exch sub ucurve readcurve 4 1 roll 1 exch
sub 4 1 roll pop pop sub ycurve readcurve clamp01}bd/rgb2plategray{v_keyg
0 eq v_plate v_cpky eq{{rgb2key}{rgb2keyG}ifelse}{v_plate v_cpyl eq{{rgb2yellow}{rgb2yellowG}ifelse}{v_plate
v_cpmg eq{{rgb2magenta}{rgb2magentaG}ifelse}{v_plate v_cpcy eq{{rgb2cyan}{rgb2cyanG}ifelse}{{rgb2key}{rgb2keyG}ifelse}ifelse}ifelse}ifelse}ifelse
1 exch sub setgray}bd/dc{0 def}bd/aca{/v_cpnone 0 def/v_cpcy 1 def
/v_cpyl 2 def/v_cpmg 3 def/v_cpky 4 def/v_gseps 0 def/v_keyg 0 def
/v_plate v_cpnone def/v_mono 0 def/v_wr dc/v_fc dc/v_fm dc/v_fy dc
/v_fk dc/v_fg dc/v_fr dc/v_fg dc/v_fb dc/v_sc dc/v_sm dc/v_sy dc/v_sk
dc/v_sg dc/v_sr dc/v_sg dc/v_sb dc/v_sct 0 def/v_fct 0 def/v_ft 0 def
/v_cxe 0 def/v_cxm 0 def/v_sa -1 def/v_ea -1 def/sR dc/sG dc/sB dc
/mR dc/mG dc/mB dc/eR dc/eG dc/eB dc/sC dc/sM dc/sY dc/sK dc/eC dc
/eM dc/eY dc/eK dc/sH dc/sS dc/sV dc/eH dc/eS dc/eV dc/sGy dc/eGy
dc/mGy dc/ci_datasrc dc/ci_matrix dc/ci_dataleft dc/ci_buf dc/ci_dataofs
dc/ci_y dc/rciBuf dc/cbslw dc/cmiBuf dc/cPalette dc/cpci_datasrc dc
/cpci_matrix dc/cpci_bpp dc/cpci_y dc/cpci_sampsleft dc/cpci_nextcol
dc/cpci_buf dc/startX dc/startY dc/endX dc/endY dc/endX2 dc/endY2 dc
/fillX dc/urx dc/ury dc/llx dc/lly dc/incD dc/distance dc/slice dc
/startangle dc/Steps dc/incH dc/incS dc/incV dc/incR dc/incG dc/incB
dc/incGy dc 0.25 setlinewidth [] 0 setdash 0 setlinejoin 0 setlinecap}bd
aca/setplategray{v_plate v_cpky eq{1 exch sub setgray pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub setgray pop pop}{v_plate v_cpmg eq{pop pop
1 exch sub setgray pop}{v_plate v_cpcy eq{pop pop pop 1 exch sub setgray}{1
exch sub setgray pop pop pop}ifelse}ifelse}ifelse}ifelse}bd/setplatecolor{v_plate
v_cpky eq{1 exch sub 0 0 0 4 -1 roll setcmykcolor pop pop pop}{v_plate
v_cpyl eq{pop 1 exch sub 0 0 0 4 2 roll setcmykcolor pop pop}{v_plate
v_cpmg eq{pop pop 1 exch sub 0 0 0 4 1 roll setcmykcolor pop}{v_plate
v_cpcy eq{pop pop pop 1 exch sub 0 0 0 setcmykcolor}{1 exch sub 0 0
0 4 -1 roll setcmykcolor pop pop pop}ifelse}ifelse}ifelse}ifelse}bd
/setcmykcolor where{pop}{/setcmykcolor{cmyk2rgb setrgbcolor}bd}ifelse
/setlogcmykcolor{v_gseps 1 eq{v_mono 1 eq{1 exch sub setgray pop pop
pop}{setcmykcolor}ifelse}{v_mono 1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd
/setlogrgbcolor{v_gseps 1 eq{v_mono 1 eq{rgbtoplategray}{rgb2devcmyk
setplatecolor}ifelse}{v_mono 1 eq{rgb2gray setgray}{systemdict begin
setrgbcolor end}ifelse}ifelse}bd/setfillcolor{v_fct 0 eq{v_fc v_fm
v_fy v_fk setlogcmykcolor}{v_fr v_fg v_fb setlogrgbcolor}ifelse}bd
/setstrokecolor{v_sct 0 eq{v_sc v_sm v_sy v_sk setlogcmykcolor}{v_sr
v_sg v_sb setlogrgbcolor}ifelse}bd/setgfillcmyk{v_gseps 1 eq{v_mono
1 eq{cmyk2rgb rgb2plategray}{cmyk2rgb rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{cmyk2rgb rgb2gray setgray}{setcmykcolor}ifelse}ifelse}bd/setgfillrgb{v_gseps
1 eq{v_mono 1 eq{rgb2plategray}{rgb2devcmyk setplatecolor}ifelse}{v_mono
1 eq{rgb2gray setgray}{systemdict begin setrgbcolor end}ifelse}ifelse}bd
/setgfillhsb{v_gseps 1 eq{v_mono 1 eq{systemdict begin sethsbcolor
currentrgbcolor end rgb2plategray}{systemdict begin sethsbcolor currentrgbcolor
end rgb2devcmyk setplatecolor}ifelse}{v_mono 1 eq{systemdict begin
sethsbcolor currentgray end setgray}{systemdict begin sethsbcolor end}ifelse}ifelse}bd
/Max{2 copy lt{exch}if pop}bd/Max3{2 copy lt{exch}if pop 2 copy lt{exch}if
pop}bd/Min{2 copy gt{exch}if pop}bd/Min3{2 copy gt{exch}if pop 2 copy
gt{exch}if pop}bd/clamp{3 1 roll Max 2 1 roll Min}bd/clamp01{0 Max
1 Min}bd/Pythag{dup mul exch dup mul add sqrt}bd/ssc{DeviceRGB setcolorspace
setcolor}bd/ssg{setgray}bd/p_render{}def/p_count 0 def/vis_flag true
def/DataString 3 string def/DataSrc{currentfile DataString readhexstring
pop}bd/DataStr1 1 string def/DataStr2 1 string def/DataStr3 1 string
def/DataSrc1{DataStr1}bd/DataSrc2{DataStr2}bd/DataSrc3{DataStr3}bd
/colorimage where{pop/ci{colorimage}bd}{/ci{pop pop/ci_datasrc exch
def matrix invertmatrix/ci_matrix exch def pop/ci_dataleft 0 def/ci_buf()def
/ci_dataofs 0 def 0 1 3 -1 roll 1 sub{/ci_y exch def dup 0 1 3 -1
roll 1 sub{0 1 2{pop ci_dataleft 0 eq{ci_datasrc dup length/ci_dataleft
exch def/ci_buf exch def/ci_dataofs 0 def}if ci_buf ci_dataofs get
255 div/ci_dataofs ci_dataofs 1 add def/ci_dataleft ci_dataleft 1 sub
def}for setrgbcolor dup ci_y 3 -1 roll 1 add ci_y 1 add 4 copy 5 1
roll 4 2 roll 5 -1 roll 1 1 4{pop ci_matrix transform 8 2 roll}for
m l l l closepath fill}for}for pop}bd}ifelse/rci{/rciBuf 4 index 3
index mul 7 add 8 div floor cvi string def{currentfile rciBuf readhexstring
pop}bind false 3 ci}bd/cbsl{2 eq/cbslL2 xd 5 index/cbslw xd translate
scale 8 [ 3 index 0 0 5 index 0 0 ] cbslL2{/DataStr1 cbslw string def
currentfile/ASCII85Decode filter/RunLengthDecode filter DataStr1 readstring
pop pop/DataStr2 cbslw string def currentfile/ASCII85Decode filter
/RunLengthDecode filter DataStr2 readstring pop pop/DataStr3 cbslw
string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr3 readstring pop pop{DataStr1}bind{DataStr2}bind{DataStr3}bind
true}{/DataSrc load false}ifelse 3 ci}bd/gbsl{2 eq/gbslL2 xd 5 index
/gbslw xd translate scale 8 [ 3 index 0 0 5 index 0 0 ] gbslL2{/DataStr1
gbslw string def currentfile/ASCII85Decode filter/RunLengthDecode filter
DataStr1 readstring pop pop{DataStr1}bind}{/DataStr1 gbslw string def
currentfile DataSrc1 readhexstring pop pop{DataStr1}bind}ifelse image}bd
/cmi{/cmiBuf 4 index 3 index mul 7 add 8 div floor cvi string def{currentfile
cmiBuf readhexstring pop}bind image}bd/cpal{4 mul string/cPalette exch
def currentfile cPalette readhexstring pop}bd/cpci{/cpci_datasrc exch
def matrix invertmatrix/cpci_matrix exch def/cpci_bpp exch def cpci_init
0 1 3 -1 roll 1 sub{/cpci_y exch def dup cpci_bpp 4 eq{cpci_sampsleft
1 eq{/cpci_sampsleft 0 def}if}if 0 1 3 -1 roll 1 sub{cpci_nextcol dup
cpci_y 3 -1 roll 1 add cpci_y 1 add 4 copy 5 1 roll 4 2 roll 5 -1 roll
1 1 4{pop cpci_matrix transform 8 2 roll}for m l l l closepath fill}for}for
pop}bd/cpci_init{/cpci_sampsleft 0 def}bd/cpci_buf 1 string def/cpci_nextcol{cpci_bpp
1 eq{cpci_sampsleft 0 eq{currentfile cpci_buf readhexstring pop pop
/cpci_sampsleft 8 def}if cpci_buf dup 0 get dup 1 and setgray -1 bitshift
1 exch put/cpci_sampsleft cpci_sampsleft 1 sub def}{cpci_bpp 4 eq{cpci_sampsleft
0 eq{currentfile cpci_buf readhexstring pop pop/cpci_sampsleft 2 def}if
cpci_buf 0 get dup 15 and exch -4 bitshift cpci_buf 0 3 -1 roll put
/cpci_sampsleft cpci_sampsleft 1 sub def}{currentfile cpci_buf readhexstring
pop 0 get}ifelse 4 mul dup 2 add cPalette exch get 255 div exch dup
1 add cPalette exch get 255 div exch cPalette exch get 255 div setrgbcolor}ifelse}bd
/setup1asciiproc{[ currentfile mystring/readhexstring cvx/pop cvx
] cvx bind}bd/setup1binaryproc{[ currentfile mystring/readstring cvx
/pop cvx ] cvx bind}bd level2{save/dontloadlevel1 xd}if/iw 0 def/ih
0 def/im_save 0 def/setupimageproc 0 def/polarity 0 def/smoothflag
0 def/mystring 0 def/bpc 0 def/beginimage{/im_save save def dup 0 eq{pop
/setup1binaryproc}{1 eq{/setup1asciiproc}{(error, can't use level2 data acquisition procs for level1)print
flush}ifelse}ifelse/setupimageproc exch ld/polarity xd/smoothflag xd
/imat xd/mystring exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save
restore}bd/1bitbwcopyimage{1 setgray 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill 0 setgray iw ih polarity imat setupimageproc
imagemask}bd/1bitcopyimage{setrgbcolor 0 0 moveto 0 1 rlineto 1 0 rlineto
0 -1 rlineto closepath fill setrgbcolor iw ih polarity imat setupimageproc
imagemask}bd/1bitmaskimage{setrgbcolor iw ih polarity [iw 0 0 ih 0
0] setupimageproc imagemask}bd level2{dontloadlevel1 restore}if level2
not{save/dontloadlevel2 xd}if/setup2asciiproc{currentfile/ASCII85Decode
filter/RunLengthDecode filter}bd/setup2binaryproc{currentfile/RunLengthDecode
filter}bd/myimagedict 9 dict dup begin/ImageType 1 def/MultipleDataSource
false def end def/im_save 0 def/setupimageproc 0 def/polarity 0 def
/smoothflag 0 def/mystring 0 def/bpc 0 def/ih 0 def/iw 0 def/beginimage{
/im_save save def dup 2 eq{pop/setup2binaryproc}{dup 3 eq{pop/setup2asciiproc}{0
eq{/setup1binaryproc}{/setup1asciiproc}ifelse}ifelse}ifelse/setupimageproc
exch ld{[ 1 0 ]}{[ 0 1 ]}ifelse/polarity xd/smoothflag xd/imat xd/mystring
exch string def/bpc xd/ih xd/iw xd}bd/endimage{im_save restore}bd/1bitbwcopyimage{1
ssg 0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill
0 ssg myimagedict dup begin/Width iw def/Height ih def/Decode polarity
def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitcopyimage{ssc
0 0 moveto 0 1 rlineto 1 0 rlineto 0 -1 rlineto closepath fill ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd/1bitmaskimage{ssc
myimagedict dup begin/Width iw def/Height ih def/Decode polarity def
/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
1 def/Interpolate smoothflag def end imagemask}bd level2 not{dontloadlevel2
restore}if
level2{save/dontloadlevel1 xd}if/startnoload{{/noload save def}if}bd
/endnoload{{noload restore}if}bd/testsystemdict{where{systemdict eq{true}{false}ifelse}{false}ifelse}bd
/ncolors 1 def/colorimage where{pop true}{false}ifelse{/ncolors 0
statusdict begin/processcolors where{pop pop processcolors}{/deviceinfo
where{pop deviceinfo/Colors known{pop{deviceinfo/Colors get}}if}if}ifelse
end def ncolors 0 ne{/colorimage testsystemdict/setcolortransfer testsystemdict
/currentcolortransfer testsystemdict/currentcmykcolor testsystemdict
and and and not{/ncolors 0 def}if}if}if ncolors dup 1 ne exch dup 3
ne exch 4 ne and and{/ncolors 0 def}if ncolors 1 eq dup dup not startnoload{
/expandbw{expandfactor mul round cvi bwclut exch get 255 div}bd/doclutimage{bwclut
colorclut pop/bwclut xd bpc dup 8 eq{pop 255}{4 eq{15}{3}ifelse}ifelse
/expandfactor xd [/expandbw load/exec load dup currenttransfer exch
] cvx bind settransfer iw ih bpc imat setupimageproc image}bd}if not
endnoload ncolors dup 3 eq exch 4 eq or dup dup not startnoload{/nullproc{{}}def
/concatutil{/exec load 7 -1 roll/exec load}bd/defsubclut{1 add getinterval
def}bd/spconcattransfer{/Dclut exch def/Cclut exch def/Bclut exch def
/Aclut exch def/ncompute exch ld currentcolortransfer [{Aclut ncompute}concatutil
] cvx [{Bclut ncompute}concatutil ] cvx [{Cclut ncompute}concatutil
] cvx [{Dclut ncompute}concatutil ] cvx setcolortransfer}bd/setuprgbcluts{
/bit3x rgbclut length 3 sub def/bit1x bit3x 3 idiv def/rclut rgbclut
def/gclut rclut 1 bit3x defsubclut/bclut rclut 2 bit3x defsubclut}bd}if
not endnoload ncolors 3 eq dup dup not startnoload{/3compute{exch bit3x
mul round cvi get 255 div}bd/doclutimage{/rgbclut xd pop setuprgbcluts
/3compute rclut gclut bclut dup spconcattransfer iw ih bpc imat [
setupimageproc/exec load/dup load dup ] cvx nullproc nullproc true
3 colorimage}bd}if not endnoload ncolors 4 eq dup dup not startnoload{
/stuffclut{cmykindex 3 -1 roll put}bd/ftoint{1 exch sub 255 mul round
cvi}bd/4compute{exch bit4x mul round cvi get 255 div}bd/computecmykclut{setuprgbcluts
/bit4x rgbclut length 3 idiv 4 mul 4 sub def/cmykclut bit4x 4 add
string def/cclut cmykclut def/mclut cclut 1 bit4x defsubclut/yclut
cclut 2 bit4x defsubclut/kclut cclut 3 bit4x defsubclut/cmykindex 0
def 0 1 bit1x{dup/cmykindex exch bit1x exch sub 4 mul def 3 mul dup
rclut exch get 255 div exch dup gclut exch get 255 div exch bclut exch
get 255 div setrgbcolor currentcmykcolor ftoint kclut stuffclut ftoint
yclut stuffclut ftoint mclut stuffclut ftoint cclut stuffclut}for}bd
/doclutimage{/rgbclut xd pop invalidcolortable?{computecmykclut}if
/4compute cclut mclut yclut kclut spconcattransfer iw ih bpc imat
[ setupimageproc/exec load/dup load dup dup ] cvx nullproc nullproc
nullproc true 4 colorimage}bd}if not endnoload ncolors 0 eq dup dup
not startnoload{/lookupandstore{3 mul 3 getinterval putinterval exch
3 add exch 3 copy}bd/8lookup/lookupandstore ld/4lookup{/byte 1 index
def -4 bitshift lookupandstore byte 15 and lookupandstore}bd/2lookup{
/byte 1 index def -6 bitshift lookupandstore byte -4 bitshift 3 and
lookupandstore byte -2 bitshift 3 and lookupandstore byte 3 and lookupandstore}bd
/colorexpand{mystringexp 0 rgbclut 3 copy 7 -1 roll/mylookup load
forall pop pop pop pop pop}bd/createexpandstr{/mystringexp exch mystring
length mul string def}bd/doclutimage{/rgbclut xd pop/mylookup bpc 8
eq{3 createexpandstr/8lookup}{bpc 4 eq{6 createexpandstr/4lookup}{12
createexpandstr/2lookup}ifelse}ifelse ld iw ih bpc imat [ setupimageproc
/exec load/colorexpand load/exec load] cvx false 3 colorimage}bd}if
not endnoload/colorimage where{pop true}{false}ifelse dup{/do24image{iw
ih 8 imat setupimageproc false 3 colorimage}bd}if dup dup startnoload
not{/rgbtogray{/str xd/len str length def/smlen len 3 idiv def/rstr
str def/gstr str 1 len 1 sub getinterval def/bstr str 2 len 2 sub getinterval
def str dup 0 1 smlen 1 sub{dup 3 mul rstr 1 index get .3 mul gstr
2 index get .59 mul add bstr 3 -1 roll get .11 mul add round cvi put
dup}for pop 0 smlen getinterval}bd/do24image{iw ih 8 imat [ setupimageproc
/exec load/rgbtogray load/exec load ] cvx bind image}bd}if endnoload
/doimage{iw ih 8 imat setupimageproc image}bd level2{dontloadlevel1
restore}if level2 not{save/dontloadlevel2 xd}if/myappcolorspace/DeviceRGB
def/rgbclut 0 def/doclutimage{/rgbclut xd pop bpc dup 8 eq{pop 255}{4
eq{15}{3}ifelse}ifelse/hival xd [/Indexed myappcolorspace hival rgbclut]
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 hival] def/ImageMatrix imat def/DataSource setupimageproc def/BitsPerComponent
bpc def/Interpolate smoothflag def end image}bd/do24image{myappcolorspace
setcolorspace myimagedict dup begin/Width iw def/Height ih def/Decode
[0 1 0 1 0 1] def/ImageMatrix imat def/DataSource setupimageproc def
/BitsPerComponent 8 def/Interpolate smoothflag def end image}bd level2
not{dontloadlevel2 restore}if
/NumSteps{dtransform matrix defaultmatrix idtransform Pythag currentscreen
pop pop 72 exch div div}bd/FindMinSteps{v_ft 4 eq{urx startX sub abs
llx startX sub abs Max ury startY sub abs lly startY sub abs Max Pythag
2 3.14159265 mul mul 0}{v_ft 2 eq{endY startY sub endX startX sub Pythag
endY2 startY sub endX2 startX sub Pythag gt{endY startY sub endX startX
sub}{endY2 startY sub endX2 startX sub}ifelse}{endY startY sub endX
startX sub}ifelse}ifelse NumSteps}bd/cxe{/v_cxe exch def}bd/cxm{pop
/v_cxm exch def}bd/cxmt{pop pop}bd/cxt{pop}bd/S_eoclip{currentflat{{eoclip}stopped{dup
currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: eoclip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_clip{currentflat{{clip}stopped{dup currentflat exch sub 20 gt{([Error: PathTooComplex; OffendingCommand: clip]\n)print
flush exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/S_eofill{currentflat{{eofill}stopped{dup currentflat exch sub 20
gt{([Error: PathTooComplex; OffendingCommand: eofill]\n)print flush
exit}{currentflat 2 add setflat}ifelse}{exit}ifelse}loop setflat}bd
/gpbbx{pathbbox/ury exch def/urx exch def/lly exch def/llx exch def}bd
/lineargfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def endY startY sub endX
startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx eGy ssg newpath llx lly urx ury Bx S_eofill sGy ssg newpath
llx lly 0 ury Bx S_eofill/fillX 0 def 0 1 Steps 1 sub{stepgfx newpath
fillX lly fillX incD add dup/fillX exch def ury Bx S_eofill pop}for}if}bd
/radialgfill{initgfill{false initgfx/distance endX startX sub endY
startY sub Pythag def/incD distance Steps div def eGy ssg newpath llx
lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepgfx newpath
startX startY distance 0 360 arc closepath distance incD add dup/distance
exch def 0 rmoveto startX startY distance 0 360 arc closepath S_eofill
pop}for}if}bd/ellipticgfill{initgfill{true initgfx sGy ssg newpath
llx lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2
startX sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepgfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for}if}bd/conicalgfill{initgfill{urx
startX sub abs llx startX sub abs Max ury startY sub abs lly startY
sub abs Max Pythag startY endY sub startX endX sub Pythag div/radius
exch def true initgfx [ endX startX sub endY startY sub startY endY
sub endX startX sub startX startY ] concat/slice 180 Steps div def
/startangle 0 def Steps -1 0{pop stepgfx 0 0 moveto 0 0 radius startangle
neg dup slice add arc fill 0 0 moveto 0 0 radius startangle dup slice
add dup/startangle exch def arc fill}for}if}bd/initgfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and sGy eGy eq or dup{sGy ssg newpath
llx lly urx ury Bx S_eofill}if not}bd/initgfx{/flag exch def flag{sGy
eGy/sGy exch def/eGy exch def}if eGy sGy sub abs 256 mul FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def eGy sGy sub Steps div/incGy
exch def sGy/mGy exch def}bd/stepgfx{mGy ssg mGy incGy add/mGy exch
def}bd/linearfill{initfill{false initfx endX startX sub endY startY
sub Pythag/distance exch def/incD distance Steps div def endY startY
sub endX startX sub atan newpath llx lly urx ury Bx startX startY translate
rotate gpbbx v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill v_cxe 0 eq{sR sG sB setgfillrgb}{sH
sS sV setgfillhsb}ifelse newpath llx lly 0 ury Bx S_eofill/fillX 0
def 0 1 Steps 1 sub{stepfx newpath fillX lly fillX incD add dup/fillX
exch def ury Bx S_eofill pop}for}if}bd/radialfill{initfill{false initfx
endX startX sub endY startY sub Pythag/distance exch def/incD distance
Steps div def v_cxe 0 eq{eR eG eB setgfillrgb}{eH eS eV setgfillhsb}ifelse
newpath llx lly urx ury Bx S_eofill/distance 0 def 0 1 Steps 1 sub{stepfx
newpath startX startY distance 0 360 arc closepath distance incD add
dup/distance exch def 0 rmoveto startX startY distance 0 360 arc closepath
S_eofill pop}for}if}bind def/ellipticalfill{initfill{true initfx v_cxe
0 eq{sR sG sB setgfillrgb}{sH sS sV setgfillhsb}ifelse newpath llx
lly urx ury Bx S_eofill [ endX startX sub endY startY sub endX2 startX
sub endY2 startY sub startX startY ] concat Steps 1 sub -1 0{stepfx
/i exch def 0 0 moveto 0 0 i Steps div 0 360 arc fill}for v_cxe 0
eq{sR sG sB eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def
/eG exch def/eR exch def}if}if}bd/conicalfill{initfill{urx startX
sub abs llx startX sub abs Max ury startY sub abs lly startY sub abs
Max Pythag startY endY sub startX endX sub Pythag div/radius exch def
true initfx [ endX startX sub endY startY sub startY endY sub endX
startX sub startX startY ] concat/slice 180 Steps div def/startangle
0 def Steps -1 0{pop stepfx 0 0 moveto 0 0 radius startangle neg dup
slice add arc fill 0 0 moveto 0 0 radius startangle dup slice add dup
/startangle exch def arc fill}for}if}bd/initfill{gpbbx{S_eoclip}{S_clip}ifelse
startX endX eq startY endY eq and v_cxe 2 ne sR eR eq sG eG eq and
sB eB eq and and or dup{sR sG sB setgfillrgb newpath llx lly urx ury
Bx S_eofill}if not}bd/initfx{/flag exch def v_cxe 0 eq{flag{sR sG sB
eR eG eB/sB exch def/sG exch def/sR exch def/eB exch def/eG exch def
/eR exch def}if eR sR sub abs 256 mul eG sG sub abs 256 mul Max eB
sB sub abs 256 mul Max FindMinSteps Min 256 Min ceiling 1 Max/Steps
exch def/incR eR sR sub Steps div def/incG eG sG sub Steps div def
/incB eB sB sub Steps div def sR/mR exch def sG/mG exch def sB/mB
exch def}{sR sG sB rgb2hsb/sV exch def/sS exch def/sH exch def eR eG
eB rgb2hsb/eV exch def/eS exch def/eH exch def eH sH sub abs v_cxe
1 eq{dup 0.5 gt{1 exch sub}if}{dup 0.5 lt{1 exch sub}if}ifelse 256
mul eS sS sub abs 256 mul Max eV sV sub abs 256 mul Max FindMinSteps
Min 256 Min ceiling 1 Max/Steps exch def v_cxe 1 eq{/incH eH sH sub
dup abs 0.5 gt{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}{/incH eH sH sub
dup abs 0.5 le{dup 0 ge{1 sub}{1 add}ifelse}if Steps div def/incS eS
sS sub Steps div def/incV eV sV sub Steps div def}ifelse flag{/sH eH
/eH sH def def/sS eS/eS sS def def/sV eV/eV sV def def/incH incH neg
def/incS incS neg def/incV incV neg def}if}ifelse}bd/stepfx{v_cxe 0
eq{mR mG mB setgfillrgb mR incR add/mR exch def mG incG add/mG exch
def mB incB add/mB exch def}{sH sS sV setgfillhsb sH incH add dup 0
le{1 add}{dup 1 ge{1 sub}if}ifelse/sH exch def sS incS add/sS exch
def sV incV add/sV exch def}ifelse}bd
/ar{}bd/arr{pop pop pop pop pop pop pop}bd/ae{pop pop pop pop pop
pop}bd/aoa{pop}bd/apl{pop}bd/apc{}bd/aof{pop pop}bd/aafs{pop pop pop}bd
/O{pop}bd/R{pop}bd/axop{pop pop pop pop}bd/g{/v_ft 0 def/v_fc 0 def
/v_fm 0 def/v_fy 0 def 1 exch sub/v_fk exch def/v_fct 0 def}bd/G{
/v_sc 0 def/v_sm 0 def/v_sy 0 def 1 exch sub/v_sk exch def/v_sct 0
def}bd/k{/v_fk exch def/v_fy exch def/v_fm exch def/v_fc exch def/v_ft
0 def/v_fct 0 def}bd/K{/v_sk exch def/v_sy exch def/v_sm exch def/v_sc
exch def/v_sct 0 def}bd/Xa{/v_fb exch def/v_fg exch def/v_fr exch def
/v_ft 0 def/v_fct 1 def}bd/XA{/v_sb exch def/v_sg exch def/v_sr exch
def/v_sct 1 def}bd/a_tc{exch pop 1 exch sub dup 3 -1 roll exch div
exch dup 4 -1 roll exch div 3 1 roll dup 5 -1 roll exch div 4 1 roll
5 -1 roll exch div 4 1 roll}bd/x{a_tc k}bd/X{a_tc K}bd/Xx{0 eq{x}{pop
pop Xa}ifelse}bd/XX{0 eq{X}{pop pop XA}ifelse}bd/awr{/v_wr exch def}bd
/w{setlinewidth}bd/j{setlinejoin}bd/J{setlinecap}bd/d{setdash}bd/asc{pop
pop J}bd/aec{pop pop J}bd/csah{pop pop pop}bd/ceah{pop pop pop}bd/cst{pop
pop}bd/cdp{pop}bd/m{moveto}bd/l{lineto}bd/c{curveto}bd/Bx{4 copy 5
1 roll 4 2 roll 5 -1 roll m l l l closepath}bd/Cp{Bx clip newpath}bd
/a_fp{gsave v_wr 0 ne v_ft 0 eq{setfillcolor{eofill}{fill}ifelse}{v_ft
1 eq{linearfill}{v_ft 2 eq{ellipticalfill}{v_ft 3 eq{radialfill}{v_ft
4 eq{conicalfill}{v_ft 8 eq{lineargfill}{v_ft 9 eq{ellipticgfill}{v_ft
10 eq{radialgfill}{conicalgfill}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse}ifelse
grestore}bd/*u{/p_count p_count 1 add def}bd/*U{/p_count p_count 1
sub def p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd/B{/p_render{a_fp
setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/b{closepath B}bd/F{/p_render{a_fp newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/f{closepath F}bd/S{/p_render{setstrokecolor stroke}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/s{closepath S}bd/H{/p_render{newpath}bd p_count 0 eq{vis_flag{p_render}{newpath}ifelse}if}bd
/h{closepath H}bd/N{H}bd/n{h}bd/cag{dup 7 add/v_ft exch def dup 2
eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 8 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def/eGy exch
def/sGy exch def}bd/caz{dup/v_ft exch def dup 2 eq{pop/endY2 exch def
/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse/endY exch def/endX
exch def/startY exch def/startX exch def/eB exch def/eG exch def/eR
exch def/sB exch def/sG exch def/sR exch def}bd/cax{dup/v_ft exch def
dup 2 eq{pop/endY2 exch def/endX2 exch def}{7 eq{pop pop/v_ft 1 def}if}ifelse
/endY exch def/endX exch def/startY exch def/startX exch def pop pop
8 3 roll pop pop/sB exch def/sG exch def/sR exch def/eB exch def/eG
exch def/eR exch def}bd/axm{/endY exch def/endX exch def/startY exch
def/startX exch def}bd/alyr{pop pop 1 eq{true}{false}ifelse/vis_flag
exch def pop pop}bd
/t{moveto show}bd/ts{moveto false charpath S}bd/tf{moveto true charpath
F}bd/tb{3 copy moveto true charpath F moveto false charpath S}bd/selectfont
where{pop}{/selectfont{dup type/integertype eq{exch findfont exch scalefont
setfont}{exch findfont exch makefont setfont}ifelse}bd}ifelse/sf{selectfont}bd
/u{}bd/U{}bd/anu{pop}bd
end
%%EndResource
%%EndProlog
%%BeginSetup
save XaraStudio1Dict begin
%%EndSetup
0 cxe
2 0 cxm
1 awr
0.00 0.00 0.00 (_103513856) 0 1 XX
0.500 w
2 j
[ ] 0 d
0 J
0.00 0.00 0.00 (_57179160) 0 1 Xx
353.437 255.692 m
355.637 255.692 357.424 254.180 357.424 252.317 c
357.424 250.454 355.637 248.942 353.437 248.942 c
351.236 248.942 349.449 250.454 349.449 252.317 c
349.449 254.180 351.236 255.692 353.437 255.692 c
b
0.634 w
194.281 393.906 m
357.261 251.894 l
196.853 165.536 l
S
0.640 w
356.497 250.968 m
149.103 275.932 l
S
1.499 w
311.203 256.844 m
139.048 277.567 l
S
308.943 263.155 m
310.210 256.963 l
307.509 251.249 l
326.086 255.051 l
f
1.500 w
311.494 253.795 m
139.732 253.795 l
S
308.493 259.795 m
310.493 253.795 l
308.493 247.794 l
326.494 253.795 l
f
139.612 264.042 m
139.612 254.039 l
S
133.611 261.041 m
139.612 263.041 l
145.612 261.041 l
139.612 279.042 l
f
0.250 w
221.234 272.466 m
221.304 272.217 221.434 272.022 221.624 271.880 c
221.814 271.738 222.040 271.666 222.302 271.663 c
222.510 271.666 222.687 271.728 222.831 271.848 c
222.975 271.969 223.095 272.127 223.190 272.322 c
223.241 272.433 223.288 272.554 223.332 272.687 c
223.376 272.819 223.414 272.946 223.446 273.069 c
223.479 273.192 223.504 273.294 223.522 273.375 c
223.540 273.456 223.549 273.501 223.550 273.510 c
223.546 273.567 223.526 273.602 223.491 273.615 c
223.456 273.627 223.427 273.632 223.406 273.630 c
223.348 273.631 223.310 273.616 223.290 273.585 c
223.270 273.553 223.253 273.496 223.238 273.414 c
223.196 273.243 223.149 273.071 223.097 272.898 c
223.045 272.724 222.984 272.564 222.914 272.418 c
222.844 272.272 222.762 272.154 222.667 272.064 c
222.573 271.975 222.463 271.929 222.338 271.926 c
222.212 271.924 222.119 271.967 222.057 272.054 c
221.996 272.140 221.966 272.282 221.966 272.478 c
221.967 272.569 221.981 272.685 222.007 272.826 c
222.033 272.966 222.064 273.116 222.101 273.274 c
222.138 273.433 222.173 273.583 222.206 273.726 c
222.260 273.942 222.316 274.158 222.374 274.374 c
222.431 274.590 222.487 274.806 222.542 275.022 c
222.555 275.085 222.574 275.169 222.600 275.273 c
222.626 275.378 222.652 275.482 222.680 275.586 c
222.707 275.690 222.729 275.774 222.746 275.838 c
222.767 275.933 222.791 276.038 222.819 276.153 c
222.847 276.267 222.871 276.370 222.892 276.462 c
222.914 276.554 222.925 276.614 222.926 276.642 c
222.922 276.750 222.887 276.830 222.819 276.884 c
222.751 276.938 222.671 276.965 222.578 276.965 c
222.555 276.968 222.513 276.961 222.451 276.947 c
222.390 276.932 222.326 276.895 222.261 276.835 c
222.195 276.776 222.145 276.679 222.110 276.546 c
222.063 276.367 222.008 276.150 221.943 275.895 c
221.878 275.639 221.809 275.367 221.736 275.079 c
221.664 274.790 221.593 274.507 221.523 274.228 c
221.454 273.949 221.392 273.696 221.337 273.470 c
221.282 273.243 221.240 273.065 221.210 272.934 c
221.207 272.917 221.175 272.858 221.114 272.756 c
221.054 272.655 220.966 272.540 220.850 272.412 c
220.734 272.284 220.592 272.172 220.424 272.077 c
220.255 271.981 220.061 271.931 219.842 271.926 c
219.636 271.930 219.480 271.982 219.372 272.083 c
219.264 272.183 219.191 272.308 219.152 272.458 c
219.113 272.607 219.095 272.758 219.098 272.910 c
219.100 273.136 219.133 273.386 219.196 273.659 c
219.260 273.932 219.341 274.214 219.439 274.505 c
219.538 274.795 219.640 275.079 219.746 275.358 c
219.794 275.476 219.833 275.578 219.863 275.663 c
219.893 275.748 219.915 275.826 219.929 275.896 c
219.943 275.967 219.950 276.039 219.950 276.114 c
219.949 276.296 219.908 276.461 219.828 276.608 c
219.748 276.756 219.635 276.874 219.488 276.962 c
219.341 277.050 219.167 277.095 218.966 277.097 c
218.738 277.092 218.538 277.032 218.364 276.915 c
218.190 276.798 218.041 276.653 217.916 276.478 c
217.792 276.303 217.691 276.126 217.612 275.946 c
217.533 275.767 217.475 275.613 217.438 275.483 c
217.401 275.354 217.382 275.276 217.383 275.250 c
217.387 275.192 217.408 275.157 217.446 275.145 c
217.483 275.132 217.510 275.127 217.527 275.130 c
217.583 275.127 217.623 275.139 217.645 275.166 c
217.667 275.193 217.692 275.253 217.719 275.346 c
217.872 275.864 218.054 276.243 218.266 276.481 c
218.478 276.719 218.699 276.837 218.930 276.833 c
218.968 276.836 219.010 276.830 219.056 276.816 c
219.102 276.802 219.142 276.767 219.176 276.711 c
219.210 276.654 219.228 276.563 219.230 276.438 c
219.226 276.289 219.201 276.139 219.155 275.989 c
219.109 275.839 219.066 275.716 219.026 275.622 c
218.878 275.227 218.752 274.877 218.648 274.571 c
218.545 274.265 218.466 273.992 218.412 273.753 c
218.358 273.513 218.331 273.296 218.331 273.102 c
218.333 272.818 218.380 272.583 218.470 272.396 c
218.560 272.209 218.679 272.062 218.825 271.955 c
218.972 271.848 219.131 271.772 219.302 271.728 c
219.473 271.683 219.641 271.662 219.806 271.663 c
220.004 271.665 220.180 271.694 220.334 271.751 c
220.489 271.808 220.624 271.879 220.740 271.965 c
220.856 272.051 220.955 272.139 221.036 272.229 c
221.117 272.319 221.183 272.398 221.234 272.466 c
f
173.786 325.594 m
173.736 325.673 173.682 325.762 173.623 325.860 c
173.564 325.958 173.511 326.046 173.462 326.125 c
173.414 326.203 173.380 326.252 173.362 326.272 c
173.283 326.347 173.201 326.379 173.115 326.369 c
173.029 326.359 172.953 326.321 172.887 326.255 c
172.832 326.202 172.793 326.126 172.769 326.027 c
172.745 325.929 172.759 325.821 172.810 325.704 c
172.817 325.687 172.853 325.625 172.916 325.517 c
172.979 325.410 173.059 325.274 173.157 325.110 c
173.255 324.947 173.359 324.772 173.471 324.585 c
173.583 324.399 173.691 324.218 173.796 324.044 c
173.901 323.869 173.992 323.717 174.069 323.588 c
174.146 323.459 174.199 323.370 174.227 323.320 c
174.323 323.166 174.410 323.040 174.485 322.942 c
174.561 322.844 174.636 322.758 174.711 322.684 c
174.756 322.639 174.788 322.608 174.808 322.590 c
174.828 322.571 174.849 322.555 174.872 322.540 c
175.002 322.216 175.063 321.928 175.058 321.675 c
175.052 321.423 174.968 321.213 174.804 321.046 c
174.633 320.881 174.469 320.784 174.312 320.754 c
174.154 320.725 174.010 320.735 173.879 320.785 c
173.748 320.835 173.637 320.896 173.546 320.970 c
173.455 321.043 173.391 321.100 173.354 321.140 c
173.287 321.206 173.216 321.285 173.142 321.378 c
173.068 321.471 172.984 321.593 172.891 321.744 c
172.799 321.896 172.692 322.091 172.571 322.330 c
172.449 322.570 172.308 322.868 172.148 323.226 c
172.095 323.341 172.050 323.439 172.011 323.521 c
171.972 323.603 171.932 323.675 171.892 323.737 c
171.852 323.799 171.805 323.858 171.749 323.913 c
171.620 324.041 171.474 324.129 171.312 324.175 c
171.149 324.222 170.985 324.225 170.819 324.183 c
170.654 324.141 170.501 324.052 170.360 323.914 c
170.202 323.750 170.103 323.566 170.063 323.360 c
170.022 323.155 170.020 322.946 170.056 322.735 c
170.091 322.523 170.145 322.326 170.216 322.144 c
170.287 321.961 170.355 321.811 170.421 321.693 c
170.486 321.575 170.528 321.507 170.547 321.489 c
170.590 321.452 170.630 321.442 170.666 321.459 c
170.701 321.477 170.723 321.493 170.733 321.506 c
170.776 321.544 170.795 321.581 170.792 321.615 c
170.788 321.650 170.763 321.710 170.716 321.794 c
170.532 322.133 170.410 322.427 170.351 322.676 c
170.291 322.925 170.279 323.134 170.315 323.302 c
170.351 323.471 170.419 323.605 170.521 323.703 c
170.546 323.731 170.579 323.756 170.621 323.779 c
170.664 323.802 170.717 323.805 170.780 323.789 c
170.844 323.773 170.921 323.721 171.011 323.633 c
171.117 323.522 171.207 323.397 171.280 323.258 c
171.354 323.118 171.412 322.995 171.454 322.888 c
171.661 322.435 171.837 322.066 171.983 321.782 c
172.128 321.498 172.257 321.272 172.368 321.105 c
172.480 320.938 172.588 320.803 172.693 320.700 c
172.952 320.447 173.216 320.297 173.484 320.250 c
173.752 320.204 174.012 320.236 174.265 320.346 c
174.517 320.455 174.751 320.618 174.964 320.834 c
175.003 320.870 175.050 320.923 175.106 320.995 c
175.162 321.066 175.213 321.160 175.258 321.277 c
175.304 321.393 175.330 321.537 175.336 321.707 c
175.342 321.877 175.315 322.078 175.254 322.311 c
175.445 322.233 175.627 322.200 175.799 322.212 c
175.970 322.224 176.128 322.262 176.272 322.328 c
176.415 322.393 176.541 322.468 176.649 322.552 c
176.757 322.636 176.843 322.711 176.908 322.777 c
177.116 322.992 177.247 323.229 177.303 323.488 c
177.359 323.746 177.363 324.010 177.316 324.279 c
177.269 324.548 177.195 324.805 177.095 325.051 c
176.999 325.292 176.880 325.551 176.737 325.826 c
176.595 326.102 176.444 326.373 176.284 326.637 c
176.125 326.902 175.972 327.138 175.825 327.346 c
175.679 327.554 175.553 327.711 175.449 327.816 c
175.293 327.969 175.151 328.068 175.023 328.113 c
174.895 328.158 174.785 328.170 174.693 328.147 c
174.601 328.125 174.531 328.088 174.482 328.037 c
174.412 327.963 174.365 327.874 174.342 327.769 c
174.319 327.663 174.318 327.560 174.339 327.457 c
174.360 327.355 174.402 327.271 174.465 327.206 c
174.519 327.153 174.574 327.121 174.630 327.110 c
174.686 327.100 174.750 327.098 174.821 327.104 c
174.885 327.106 174.971 327.101 175.080 327.087 c
175.188 327.073 175.309 327.036 175.442 326.977 c
175.575 326.918 175.710 326.822 175.848 326.688 c
175.921 326.613 176.009 326.498 176.109 326.343 c
176.210 326.188 176.313 326.012 176.419 325.815 c
176.526 325.619 176.624 325.420 176.715 325.220 c
176.806 325.019 176.879 324.836 176.934 324.669 c
177.052 324.332 177.102 324.020 177.082 323.734 c
177.063 323.447 176.951 323.199 176.747 322.989 c
176.546 322.789 176.329 322.697 176.096 322.713 c
175.863 322.730 175.624 322.858 175.381 323.099 c
175.301 323.180 175.227 323.265 175.158 323.356 c
175.089 323.446 175.028 323.531 174.976 323.612 c
174.924 323.693 174.884 323.759 174.855 323.812 c
173.786 325.594 l
f
177.171 330.013 m
177.968 330.811 l
178.026 330.866 178.071 330.915 178.103 330.958 c
178.136 331.001 178.149 331.044 178.144 331.087 c
178.139 331.130 178.109 331.179 178.053 331.235 c
178.008 331.279 177.961 331.286 177.910 331.255 c
177.860 331.224 177.797 331.169 177.722 331.090 c
176.976 330.344 l
176.753 330.718 176.572 331.021 176.435 331.251 c
176.297 331.481 176.192 331.657 176.118 331.778 c
176.045 331.899 175.992 331.984 175.961 332.032 c
175.929 332.079 175.908 332.108 175.898 332.118 c
175.824 332.189 175.745 332.222 175.660 332.217 c
175.576 332.213 175.496 332.174 175.422 332.101 c
175.410 332.092 175.387 332.060 175.353 332.005 c
175.320 331.951 175.300 331.876 175.294 331.783 c
175.287 331.690 175.319 331.581 175.389 331.456 c
176.407 329.775 l
175.610 328.978 l
175.522 328.897 175.465 328.826 175.439 328.767 c
175.414 328.708 175.439 328.640 175.517 328.562 c
175.565 328.513 175.613 328.502 175.661 328.529 c
175.709 328.555 175.774 328.612 175.856 328.698 c
176.602 329.445 l
176.960 328.844 177.256 328.347 177.493 327.951 c
177.729 327.556 177.918 327.240 178.061 327.004 c
178.204 326.769 178.314 326.590 178.390 326.469 c
178.467 326.348 178.525 326.262 178.564 326.211 c
178.602 326.160 178.636 326.121 178.664 326.094 c
178.819 325.941 178.988 325.839 179.170 325.788 c
179.353 325.738 179.535 325.738 179.718 325.789 c
179.901 325.840 180.069 325.941 180.224 326.094 c
180.394 326.271 180.509 326.471 180.568 326.696 c
180.626 326.921 180.648 327.150 180.633 327.383 c
180.617 327.616 180.583 327.833 180.531 328.034 c
180.478 328.236 180.425 328.401 180.372 328.530 c
180.319 328.659 180.284 328.732 180.267 328.749 c
180.224 328.788 180.187 328.800 180.155 328.785 c
180.123 328.771 180.098 328.753 180.081 328.732 c
180.044 328.697 180.026 328.663 180.029 328.631 c
180.031 328.599 180.045 328.551 180.072 328.486 c
180.240 328.072 180.337 327.719 180.362 327.428 c
180.387 327.137 180.367 326.900 180.303 326.716 c
180.238 326.532 180.156 326.392 180.055 326.297 c
179.967 326.207 179.871 326.171 179.767 326.189 c
179.662 326.207 179.540 326.286 179.402 326.424 c
179.335 326.491 179.283 326.547 179.243 326.594 c
179.204 326.641 179.170 326.686 179.142 326.730 c
179.113 326.774 179.081 326.825 179.045 326.883 c
177.171 330.013 l
f
127.320 263.005 m
127.318 263.219 127.288 263.387 127.231 263.510 c
127.174 263.633 127.106 263.719 127.025 263.770 c
126.945 263.821 126.867 263.845 126.792 263.844 c
126.691 263.842 126.596 263.811 126.507 263.753 c
126.418 263.695 126.346 263.623 126.290 263.535 c
126.235 263.448 126.206 263.359 126.205 263.269 c
126.204 263.194 126.220 263.131 126.251 263.080 c
126.282 263.029 126.331 262.972 126.397 262.909 c
126.524 262.790 126.623 262.650 126.695 262.489 c
126.767 262.328 126.803 262.140 126.804 261.925 c
126.804 261.837 126.784 261.698 126.744 261.509 c
126.703 261.319 126.643 261.103 126.563 260.858 c
126.482 260.613 126.382 260.364 126.263 260.110 c
126.143 259.856 126.004 259.621 125.846 259.404 c
125.687 259.187 125.510 259.012 125.313 258.879 c
125.117 258.746 124.901 258.677 124.667 258.673 c
124.362 258.678 124.138 258.774 123.995 258.961 c
123.851 259.148 123.780 259.400 123.781 259.717 c
123.783 259.941 123.815 260.187 123.879 260.454 c
123.942 260.721 124.025 261.005 124.130 261.308 c
124.234 261.611 124.349 261.928 124.475 262.261 c
124.518 262.361 124.552 262.458 124.578 262.552 c
124.605 262.646 124.618 262.749 124.619 262.861 c
124.618 263.043 124.577 263.208 124.497 263.355 c
124.417 263.503 124.304 263.621 124.158 263.709 c
124.011 263.797 123.838 263.842 123.638 263.844 c
123.412 263.839 123.213 263.779 123.040 263.662 c
122.867 263.545 122.718 263.400 122.593 263.225 c
122.469 263.050 122.366 262.873 122.287 262.693 c
122.207 262.514 122.148 262.360 122.111 262.230 c
122.073 262.101 122.054 262.023 122.054 261.997 c
122.059 261.939 122.080 261.904 122.117 261.892 c
122.155 261.879 122.182 261.874 122.198 261.877 c
122.255 261.874 122.295 261.886 122.317 261.913 c
122.339 261.940 122.364 262 122.390 262.093 c
122.508 262.493 122.639 262.801 122.782 263.017 c
122.924 263.233 123.067 263.382 123.210 263.464 c
123.353 263.546 123.484 263.584 123.602 263.580 c
123.635 263.583 123.675 263.578 123.721 263.566 c
123.767 263.554 123.808 263.521 123.843 263.467 c
123.879 263.412 123.897 263.322 123.899 263.197 c
123.896 263.044 123.873 262.893 123.830 262.745 c
123.787 262.597 123.743 262.467 123.697 262.357 c
123.566 262.011 123.456 261.711 123.368 261.458 c
123.280 261.204 123.210 260.985 123.158 260.798 c
123.106 260.612 123.069 260.447 123.047 260.303 c
123.025 260.159 123.014 260.024 123.014 259.897 c
123.018 259.575 123.076 259.316 123.187 259.118 c
123.299 258.920 123.439 258.770 123.610 258.667 c
123.780 258.565 123.955 258.496 124.135 258.460 c
124.316 258.424 124.477 258.408 124.619 258.410 c
124.907 258.414 125.168 258.487 125.404 258.632 c
125.639 258.776 125.850 258.969 126.037 259.212 c
126.223 259.454 126.388 259.724 126.529 260.022 c
126.671 260.320 126.792 260.624 126.892 260.934 c
126.993 261.245 127.075 261.540 127.138 261.821 c
127.201 262.101 127.247 262.346 127.276 262.554 c
127.306 262.762 127.320 262.912 127.320 263.005 c
f
0.500 w
53.101 364.490 m
101.058 412.447 178.905 412.447 226.862 364.490 c
274.819 316.533 274.819 238.686 226.862 190.729 c
178.905 142.772 101.058 142.772 53.101 190.729 c
5.144 238.686 5.144 316.533 53.101 364.490 c
s
141.266 277.609 m
217.276 363.360 l
S
213.766 364.299 m
216.916 362.954 l
218.629 359.988 l
222.664 369.438 l
f
0.250 w
*u
141.904 286.482 m
141.899 287.130 141.767 287.696 141.508 288.178 c
141.248 288.660 140.890 289.035 140.432 289.303 c
139.974 289.570 139.444 289.706 138.844 289.710 c
138.322 289.706 137.809 289.604 137.305 289.404 c
136.801 289.204 136.327 288.927 135.883 288.572 c
135.440 288.218 135.048 287.807 134.708 287.341 c
134.368 286.874 134.102 286.373 133.908 285.838 c
133.715 285.302 133.617 284.752 133.613 284.189 c
133.616 283.690 133.695 283.243 133.850 282.848 c
134.006 282.453 134.223 282.117 134.501 281.840 c
134.779 281.563 135.104 281.352 135.476 281.206 c
135.847 281.061 136.250 280.987 136.684 280.986 c
137.197 280.989 137.703 281.088 138.204 281.282 c
138.704 281.476 139.176 281.747 139.620 282.094 c
140.064 282.442 140.457 282.846 140.799 283.308 c
141.141 283.770 141.410 284.270 141.605 284.809 c
141.800 285.347 141.900 285.905 141.904 286.482 c
f
136.756 281.296 m
136.357 281.298 136.006 281.402 135.703 281.607 c
135.400 281.812 135.162 282.105 134.991 282.486 c
134.819 282.867 134.732 283.323 134.729 283.853 c
134.727 283.989 134.741 284.190 134.770 284.454 c
134.798 284.719 134.851 285.023 134.928 285.367 c
135.006 285.711 135.116 286.070 135.260 286.445 c
135.405 286.819 135.591 287.183 135.821 287.539 c
136.100 287.955 136.408 288.302 136.743 288.579 c
137.079 288.856 137.421 289.064 137.770 289.203 c
138.118 289.342 138.452 289.411 138.772 289.411 c
139.021 289.413 139.267 289.368 139.509 289.278 c
139.752 289.189 139.973 289.046 140.173 288.852 c
140.372 288.657 140.532 288.403 140.651 288.089 c
140.771 287.776 140.832 287.396 140.835 286.950 c
140.837 286.730 140.814 286.459 140.766 286.135 c
140.719 285.811 140.638 285.457 140.525 285.073 c
140.412 284.689 140.257 284.297 140.061 283.897 c
139.865 283.496 139.619 283.110 139.324 282.737 c
139.129 282.488 138.897 282.255 138.626 282.038 c
138.355 281.820 138.061 281.643 137.742 281.507 c
137.423 281.371 137.095 281.300 136.756 281.296 c
f
*U
*u
228.237 371.126 m
230.277 371.126 l
230.707 371.129 231.123 371.201 231.523 371.342 c
231.923 371.483 232.283 371.675 232.602 371.918 c
232.921 372.161 233.174 372.436 233.362 372.745 c
233.549 373.054 233.645 373.378 233.649 373.717 c
233.649 373.950 233.599 374.175 233.501 374.390 c
233.402 374.606 233.254 374.799 233.056 374.970 c
232.859 375.141 232.613 375.276 232.318 375.376 c
232.022 375.476 231.678 375.527 231.285 375.529 c
227.397 375.529 l
227.283 375.534 227.194 375.524 227.132 375.501 c
227.070 375.477 227.038 375.411 227.038 375.301 c
227.037 375.232 227.065 375.190 227.122 375.175 c
227.178 375.160 227.266 375.154 227.385 375.157 c
227.466 375.157 227.554 375.155 227.648 375.150 c
227.742 375.145 227.827 375.140 227.901 375.133 c
227.996 375.123 228.064 375.105 228.105 375.078 c
228.146 375.051 228.166 375.006 228.165 374.941 c
228.166 374.920 228.162 374.894 228.155 374.863 c
228.148 374.833 228.135 374.783 228.117 374.713 c
226.510 368.269 l
226.482 368.152 226.453 368.057 226.422 367.983 c
226.390 367.909 226.341 367.851 226.274 367.811 c
226.207 367.770 226.106 367.742 225.971 367.727 c
225.837 367.711 225.652 367.704 225.418 367.704 c
225.314 367.709 225.233 367.700 225.173 367.676 c
225.113 367.652 225.083 367.586 225.082 367.476 c
225.083 367.429 225.096 367.396 225.120 367.375 c
225.145 367.355 225.171 367.342 225.199 367.338 c
225.227 367.333 225.248 367.332 225.262 367.333 c
225.348 367.333 225.459 367.335 225.594 367.338 c
225.729 367.342 225.872 367.346 226.024 367.351 c
226.175 367.355 226.318 367.359 226.453 367.363 c
226.588 367.366 226.699 367.368 226.786 367.369 c
226.912 367.368 227.040 367.366 227.170 367.363 c
227.299 367.359 227.427 367.357 227.553 367.357 c
227.686 367.356 227.817 367.352 227.948 367.345 c
228.079 367.338 228.207 367.334 228.333 367.333 c
228.363 367.331 228.396 367.334 228.433 367.341 c
228.470 367.349 228.502 367.370 228.530 367.404 c
228.557 367.438 228.572 367.494 228.573 367.572 c
228.574 367.636 228.546 367.674 228.491 367.688 c
228.436 367.702 228.351 367.707 228.237 367.704 c
228.011 367.700 227.825 367.709 227.681 367.731 c
227.537 367.754 227.462 367.817 227.457 367.920 c
227.458 367.956 227.463 367.990 227.471 368.023 c
227.479 368.055 227.487 368.089 227.493 368.125 c
228.237 371.126 l
f
229.101 374.701 m
229.134 374.839 229.168 374.941 229.203 375.006 c
229.238 375.072 229.296 375.114 229.376 375.133 c
229.457 375.151 229.581 375.160 229.749 375.157 c
230.901 375.157 l
231.235 375.159 231.524 375.120 231.767 375.043 c
232.010 374.965 232.199 374.842 232.331 374.672 c
232.464 374.502 232.531 374.280 232.533 374.005 c
232.533 373.885 232.518 373.739 232.488 373.566 c
232.459 373.394 232.414 373.214 232.355 373.025 c
232.295 372.837 232.222 372.659 232.133 372.491 c
232.045 372.323 231.942 372.184 231.825 372.073 c
231.623 371.895 231.414 371.760 231.197 371.668 c
230.980 371.576 230.767 371.513 230.558 371.481 c
230.349 371.449 230.155 371.434 229.977 371.437 c
228.285 371.437 l
229.101 374.701 l
f
*U
*u
360.814 235.532 m
361.284 235.713 361.734 235.973 362.165 236.312 c
362.597 236.651 362.983 237.051 363.324 237.510 c
363.665 237.969 363.935 238.469 364.133 239.010 c
364.332 239.550 364.434 240.112 364.438 240.694 c
364.433 241.342 364.301 241.908 364.042 242.390 c
363.783 242.872 363.425 243.247 362.967 243.515 c
362.509 243.782 361.979 243.918 361.378 243.922 c
360.856 243.918 360.343 243.816 359.838 243.616 c
359.334 243.416 358.860 243.139 358.417 242.784 c
357.973 242.430 357.582 242.019 357.242 241.553 c
356.902 241.086 356.635 240.585 356.442 240.049 c
356.249 239.513 356.151 238.964 356.147 238.401 c
356.150 237.902 356.229 237.455 356.384 237.060 c
356.539 236.665 356.756 236.329 357.034 236.052 c
357.313 235.775 357.637 235.564 358.009 235.418 c
358.380 235.273 358.783 235.199 359.217 235.198 c
359.368 235.197 359.543 235.211 359.742 235.238 c
359.942 235.266 360.159 235.312 360.394 235.377 c
360.382 235.193 360.373 235.048 360.366 234.940 c
360.360 234.833 360.355 234.751 360.352 234.694 c
360.349 234.637 360.347 234.591 360.347 234.558 c
360.346 234.524 360.346 234.489 360.346 234.452 c
360.343 234.352 360.348 234.229 360.361 234.084 c
360.374 233.938 360.411 233.793 360.470 233.648 c
360.530 233.503 360.629 233.382 360.766 233.285 c
360.904 233.187 361.096 233.137 361.342 233.133 c
361.580 233.136 361.795 233.190 361.987 233.296 c
362.179 233.402 362.349 233.539 362.497 233.707 c
362.646 233.876 362.774 234.056 362.881 234.247 c
362.988 234.439 363.076 234.623 363.145 234.799 c
363.214 234.974 363.265 235.122 363.298 235.243 c
363.332 235.363 363.348 235.436 363.348 235.461 c
363.345 235.502 363.329 235.533 363.300 235.552 c
363.270 235.571 363.242 235.581 363.216 235.580 c
363.169 235.579 363.136 235.566 363.117 235.541 c
363.097 235.516 363.082 235.485 363.072 235.449 c
362.971 235.166 362.838 234.940 362.673 234.771 c
362.507 234.602 362.334 234.480 362.154 234.405 c
361.973 234.330 361.811 234.294 361.667 234.295 c
361.484 234.294 361.338 234.333 361.227 234.413 c
361.116 234.494 361.029 234.625 360.966 234.806 c
360.903 234.988 360.852 235.230 360.814 235.532 c
f
358.545 235.628 m
358.234 235.755 357.979 235.937 357.781 236.173 c
357.583 236.410 357.436 236.685 357.342 237.001 c
357.248 237.316 357.201 237.654 357.202 238.017 c
357.201 238.227 357.222 238.482 357.265 238.782 c
357.307 239.082 357.376 239.407 357.472 239.756 c
357.567 240.105 357.693 240.459 357.850 240.818 c
358.006 241.176 358.198 241.519 358.425 241.847 c
358.720 242.254 359.034 242.589 359.367 242.851 c
359.699 243.114 360.032 243.308 360.365 243.435 c
360.697 243.561 361.011 243.624 361.306 243.623 c
361.710 243.622 362.067 243.521 362.379 243.321 c
362.690 243.121 362.934 242.832 363.112 242.453 c
363.290 242.074 363.380 241.616 363.384 241.078 c
363.385 240.834 363.358 240.538 363.304 240.191 c
363.250 239.844 363.161 239.473 363.039 239.076 c
362.917 238.680 362.754 238.284 362.551 237.891 c
362.348 237.497 362.098 237.131 361.802 236.793 c
361.506 236.455 361.156 236.171 360.754 235.941 c
360.741 236.049 360.718 236.176 360.687 236.320 c
360.655 236.465 360.604 236.607 360.532 236.746 c
360.460 236.885 360.357 237.001 360.224 237.093 c
360.090 237.185 359.915 237.233 359.697 237.237 c
359.482 237.233 359.282 237.174 359.097 237.058 c
358.913 236.943 358.763 236.792 358.649 236.608 c
358.535 236.423 358.477 236.224 358.473 236.013 c
358.476 235.892 358.488 235.800 358.509 235.735 c
358.530 235.670 358.542 235.635 358.545 235.628 c
f
359.289 235.496 m
359.229 235.493 359.157 235.500 359.071 235.516 c
358.986 235.531 358.910 235.576 358.843 235.649 c
358.776 235.723 358.740 235.844 358.737 236.013 c
358.739 236.176 358.785 236.330 358.874 236.475 c
358.963 236.621 359.079 236.739 359.224 236.831 c
359.369 236.923 359.527 236.970 359.697 236.973 c
359.949 236.977 360.134 236.898 360.253 236.738 c
360.372 236.577 360.431 236.316 360.430 235.953 c
360.432 235.867 360.425 235.810 360.409 235.783 c
360.393 235.756 360.356 235.732 360.298 235.713 c
360.140 235.646 359.975 235.593 359.802 235.555 c
359.630 235.517 359.459 235.497 359.289 235.496 c
f
*U
end restore
%%PageTrailer
showpage
%%Trailer
%%EOF
